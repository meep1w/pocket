import asyncio
from typing import Optional, List, Tuple

from aiogram import Bot, Dispatcher, F, Router, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, FSInputFile,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command

from sqlalchemy import func

from app.models import Tenant, User, UserStep, TenantText, TenantConfig, Postback, TenantStatus
from app.db import SessionLocal
from app.settings import settings
from app.utils.common import safe_delete_message

from pathlib import Path

# ---------------------- –≠–ö–†–ê–ù–´ / –ö–õ–Æ–ß–ò ----------------------
KEYS: List[Tuple[str, dict]] = [
    ("lang",      {"ru": "–í—ã–±–æ—Ä —è–∑—ã–∫–∞",        "en": "Language"}),
    ("main",      {"ru": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",       "en": "Main menu"}),
    ("guide",     {"ru": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",         "en": "Instruction"}),
    ("subscribe", {"ru": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",  "en": "Subscribe"}),
    ("step1",     {"ru": "–®–∞–≥ 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "en": "Step 1. Registration"}),
    ("step2",     {"ru": "–®–∞–≥ 2. –î–µ–ø–æ–∑–∏—Ç",     "en": "Step 2. Deposit"}),
    ("unlocked",  {"ru": "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç",      "en": "Access granted"}),
]

DEFAULT_TEXTS = {
    "lang": {"ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", "en": "Choose your language"},
    "main": {"ru": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "en": "Main menu"},
    "guide": {
        "ru": (
            "–ù–∏–∂–µ –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ üßæ:\n\n"
            "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ PocketOption —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n"
            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏.\n"
            "3. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª –∏ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –µ–º—É.\n"
            "4. –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–≤–æ–∏—Ç—å —Å—É–º–º—É, —á—Ç–æ–±—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —É–±—ã—Ç–æ–∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–≥–Ω–∞–ª–æ–º."
        ),
        "en": (
            "Step-by-step instructions for using the bot üßæ:\n\n"
            "1) Register a PocketOption account via this bot.\n"
            "2) Start the bot and choose the currency pair and expiration time.\n"
            "3) Tap ‚ÄúGet signal‚Äù and follow it precisely.\n"
            "4) If a signal fails, it‚Äôs recommended to double the amount to compensate on the next signal."
        ),
    },
    "subscribe": {
        "ru": "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç.",
        "en": "First, subscribe to the channel.\n\nAfter subscribing, return to the bot.",
    },
    "step1": {
        "ru": (
            "‚ö°Ô∏è–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —É –±—Ä–æ–∫–µ—Ä–∞ PocketOption –ø–æ –Ω–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üü¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            "‚ùóÔ∏è–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π–¥—ë—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥!"
        ),
        "en": (
            "‚ö°Ô∏èRegistration\n\n"
            "To receive signals, you must register with the PocketOption broker using our link.\n"
            "Click the ¬´üü¢ Register¬ª button to create an account.\n\n"
            "‚ùóÔ∏èAfter registration you will automatically proceed to the next step!"
        ),
    },
    "step2": {
        "ru": (
            "‚ö°Ô∏è–í–Ω–µ—Å–∏—Ç–µ –¥–µ–ø–æ–∑–∏—Ç: ${{min_dep}}.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üí≥ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç¬ª, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ –±—Ä–æ–∫–µ—Ä–∞ ‚Äî —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
        ),
        "en": (
            "‚ö°Ô∏èMake a deposit: ${{min_dep}}.\n\n"
            "Press ¬´üí≥ Deposit¬ª to top up the balance on the broker's website ‚Äî this is required to start right away."
        ),
    },
    "unlocked": {"ru": "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª.", "en": "Access granted. Press ‚ÄúGet signal‚Äù."},
}

def key_title(key: str, locale: str) -> str:
    for k, names in KEYS:
        if k == key:
            return names.get(locale, k)
    return key

def default_text(key: str, locale: str) -> str:
    return DEFAULT_TEXTS.get(key, {}).get(locale, key)

def _project_root() -> Path:
    return Path(__file__).resolve().parents[3]

def _find_stock_file(key: str, locale: str) -> Path | None:
    stock = _project_root() / "static" / "stock"
    for ext in ("jpg", "jpeg", "png", "webp"):
        p = stock / f"{key}-{locale}.{ext}"
        if p.exists():
            return p
    return None

def tget(db, tenant_id: int, key: str, locale: str, fallback_text: str):
    tt = db.query(TenantText).filter(
        TenantText.tenant_id == tenant_id,
        TenantText.locale == locale,
        TenantText.key == key,
    ).first()
    return (tt.text if tt and tt.text else fallback_text), (tt.image_file_id if tt else None)

def get_cfg(db: SessionLocal, tenant_id: int) -> TenantConfig:
    cfg = db.query(TenantConfig).filter(TenantConfig.tenant_id == tenant_id).first()
    if not cfg:
        cfg = TenantConfig(
            tenant_id=tenant_id,
            require_deposit=True,
            min_deposit=50,
            require_subscription=False,
            vip_threshold=500,
        )
        db.add(cfg)
        db.commit()
        db.refresh(cfg)
    # –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ ¬´–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏¬ª
    if getattr(cfg, "require_subscription", None) is None:
        cfg.require_subscription = False
        db.commit(); db.refresh(cfg)
    if getattr(cfg, "vip_threshold", None) is None:
        cfg.vip_threshold = 500
        db.commit(); db.refresh(cfg)
    return cfg

def get_deposit_total(db, tenant_id: int, user: User) -> int:
    total = db.query(func.coalesce(func.sum(Postback.sum), 0)).filter(
        Postback.tenant_id == tenant_id,
        Postback.event == "deposit",
        Postback.click_id == str(user.tg_user_id),
        Postback.token_ok.is_(True),
    ).scalar() or 0
    return int(total)

async def send_screen(bot, user, key: str, locale: str, text: str, kb, image_file_id: str | None):
    await safe_delete_message(bot, user.tg_user_id, user.last_message_id)
    if image_file_id:
        try:
            m = await bot.send_photo(user.tg_user_id, image_file_id, caption=text, reply_markup=kb)
            user.last_message_id = m.message_id
            return
        except TelegramBadRequest:
            pass
        except Exception:
            pass
    p = _find_stock_file(key, locale)
    if p:
        try:
            m = await bot.send_photo(user.tg_user_id, FSInputFile(str(p)), caption=text, reply_markup=kb)
            user.last_message_id = m.message_id
            return
        except Exception:
            pass
    m = await bot.send_message(user.tg_user_id, text, reply_markup=kb)
    user.last_message_id = m.message_id

# --------- –ø–æ–¥–ø–∏—Å–∫–∞ ----------
def _parse_channel_identifier(url: str):
    if not url:
        print("[sub] no channel_url provided")
        return None
    u = str(url).strip()
    # numeric chat_id (supergroup/channel)
    if u.startswith("-100") and u[4:].isdigit():
        try:
            ident = int(u)
        except Exception:
            print(f"[sub] bad numeric id: {u}")
            return None
        print(f"[sub] parsed chat_id={ident}")
        return ident
    if u.startswith("@"):
        print(f"[sub] parsed username={u}")
        return u
    if "t.me/" in u:
        tail = u.split("t.me/", 1)[1]
        tail = tail.split("?", 1)[0].strip("/")
        if not tail or tail.startswith("+") or tail.lower() == "joinchat":
            # –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            print(f"[sub] invite or joinchat link, cannot check: {u}")
            return None
        ident = "@" + tail if not tail.startswith("@") else tail
        print(f"[sub] parsed from url -> {ident}")
        return ident
    print(f"[sub] unknown format: {u}")
    return None


async def is_user_subscribed(bot: Bot, channel_url: str, user_id: int) -> bool:
    ident = _parse_channel_identifier(channel_url)
    if not ident:
        print(f"[sub] ident is None for channel_url='{channel_url}'")
        return False
    try:
        print(f"[sub] get_chat_member ident={ident} user_id={user_id}")
        member = await bot.get_chat_member(ident, user_id)
        status = getattr(member, "status", None)
        print(f"[sub] result status={status}")
        # –í —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö "restricted" = —É—á–∞—Å—Ç–Ω–∏–∫ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏), —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
        return status in ("member", "administrator", "creator", "restricted")
    except Exception as e:
        # –ù–∞ –∫–∞–Ω–∞–ª–∞—Ö –±–µ–∑ –∞–¥–º–∏–Ω—Å—Ç–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å CHAT_ADMIN_REQUIRED, –∞ —Ç–∞–∫–∂–µ 400 –µ—Å–ª–∏ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        print(f"[subscribe-check] error: {e} (channel_url={channel_url!r}, ident={ident}, user_id={user_id})")
        return False


def tenant_miniapp_url(tenant: Tenant, user: User) -> str:
    # 1) –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è VIP-–º–∏–Ω–∏-–∞–ø–ø–∞ (–µ—Å–ª–∏ –∞–¥–º–∏–Ω –∑–∞–¥–∞–ª —Ä—É–∫–∞–º–∏)
    if getattr(user, "vip_miniapp_url", None):
        base = user.vip_miniapp_url.rstrip("/")
        return f"{base}?tenant_id={tenant.id}&uid={user.tg_user_id}"

    # 2) –°—Ç–æ–∫–æ–≤–∞—è VIP-–º–∏–Ω–∏-–∞–ø–ø–∞ –∏–∑ ENV ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP
    is_vip = bool(getattr(user, "is_vip", False))
    vip_env = getattr(settings, "vip_miniapp_url", None)
    if is_vip and vip_env:
        base = vip_env.rstrip("/")
        return f"{base}?tenant_id={tenant.id}&uid={user.tg_user_id}"

    # 3) –û–±—ã—á–Ω–∞—è –º–∏–Ω–∏-–∞–ø–ø–∞ (–ø–µ—Ä-–±–æ—Ç–æ–≤–∞—è –∏–ª–∏ –∏–∑ ENV)
    base = (tenant.miniapp_url or settings.miniapp_url).rstrip("/")
    return f"{base}?tenant_id={tenant.id}&uid={user.tg_user_id}"


# ------------------------------- –ö–ù–û–ü–ö–ò -------------------------------
from aiogram.types import WebAppInfo

def kb_main(locale: str, support_url: Optional[str], tenant: Tenant, user: User):
    # –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç ‚Äî —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏-–∞–ø–ø
    if user.step == UserStep.deposited:
        signal_btn = InlineKeyboardButton(
            text="üìà Get signal" if locale == "en" else "üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
            web_app=WebAppInfo(url=tenant_miniapp_url(tenant, user)),
        )
    else:
        signal_btn = InlineKeyboardButton(
            text="üìà Get signal" if locale == "en" else "üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
            callback_data="menu:get",
        )

    if locale == "en":
        rows = [
            [InlineKeyboardButton(text="üìò Instruction", callback_data="menu:guide")],
            [
                InlineKeyboardButton(text="üÜò Support", url=support_url or "about:blank"),
                InlineKeyboardButton(text="üåê Change language", callback_data="menu:lang"),
            ],
            [signal_btn],
        ]
    else:
        rows = [
            [InlineKeyboardButton(text="üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="menu:guide")],
            [
                InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_url or "about:blank"),
                InlineKeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="menu:lang"),
            ],
            [signal_btn],
        ]
    return InlineKeyboardMarkup(inline_keyboard=rows)



def kb_back(locale: str):
    txt = "üè† Main menu" if locale == "en" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=txt, callback_data="menu:main")]])

def kb_lang(current: Optional[str]):
    ru = ("‚úÖ " if current == "ru" else "") + "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
    en = ("‚úÖ " if current == "en" else "") + "üá¨üáß English"
    rows = [
        [InlineKeyboardButton(text=ru, callback_data="lang:ru"), InlineKeyboardButton(text=en, callback_data="lang:en")],
        [
            InlineKeyboardButton(
                text=("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if (current or "ru") == "ru" else "üè† Main menu"), callback_data="menu:main"
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_subscribe(locale: str, channel_url: str) -> InlineKeyboardMarkup:
    go_txt = "üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª" if locale == "ru" else "üöÄ Go to channel"
    back_txt = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if locale == "ru" else "üè† Main menu"
    check_txt = "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è" if locale == "ru" else "‚úÖ I've subscribed"

    url = (channel_url or "").strip()
    if url.startswith("@"):
        url = f"https://t.me/{url[1:]}"
    elif not (url.startswith("http://") or url.startswith("https://")):
        url = "https://t.me"

    rows = [
        [InlineKeyboardButton(text=go_txt, url=url)],
        [InlineKeyboardButton(text=check_txt, callback_data="menu:subcheck")],
        [InlineKeyboardButton(text=back_txt, callback_data="menu:main")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ------------------------------- –†–ï–ù–î–ï–† –≠–ö–†–ê–ù–û–í ------------------------------
async def render_lang_screen(bot: Bot, tenant: Tenant, user: User, current_lang: Optional[str]):
    db = SessionLocal()
    try:
        locale = (current_lang or tenant.lang_default or "ru").lower()
        text, img = tget(db, tenant.id, "lang", locale, default_text("lang", locale))

        await safe_delete_message(bot, user.tg_user_id, user.last_message_id)
        rm = kb_lang(current_lang)

        try:
            if img:
                m = await bot.send_photo(user.tg_user_id, img, caption=text, reply_markup=rm)
            else:
                p = _find_stock_file("lang", locale)
                if p:
                    m = await bot.send_photo(user.tg_user_id, FSInputFile(str(p)), caption=text, reply_markup=rm)
                else:
                    m = await bot.send_message(user.tg_user_id, text, reply_markup=rm)
        except Exception:
            m = await bot.send_message(user.tg_user_id, text, reply_markup=rm)

        user.last_message_id = m.message_id
        db.commit()
    finally:
        db.close()

async def render_main(bot: Bot, tenant: Tenant, user: User):
    db = SessionLocal()
    try:
        locale = user.lang or tenant.lang_default or "ru"
        text, img = tget(db, tenant.id, "main", locale, default_text("main", locale))
        kb = kb_main(locale, tenant.support_url, tenant, user)
        await send_screen(bot, user, "main", locale, text, kb, img)
        db.commit()
    finally:
        db.close()

async def render_guide(bot: Bot, tenant: Tenant, user: User):
    db = SessionLocal()
    try:
        locale = user.lang or tenant.lang_default or "ru"
        text, img = tget(db, tenant.id, "guide", locale, default_text("guide", locale))
        await send_screen(bot, user, "guide", locale, text, kb_back(locale), img)
        db.commit()
    finally:
        db.close()

async def render_subscribe(bot: Bot, tenant: Tenant, user: User):
    db = SessionLocal()
    try:
        locale = user.lang or tenant.lang_default or "ru"
        text, img = tget(db, tenant.id, "subscribe", locale, default_text("subscribe", locale))
        kb = kb_subscribe(locale, tenant.channel_url or "")
        await send_screen(bot, user, "subscribe", locale, text, kb, img)
        db.commit()
    finally:
        db.close()

async def render_get(bot: Bot, tenant: Tenant, user: User):
    db = SessionLocal()
    try:
        locale = user.lang or tenant.lang_default or "ru"
        cfg = get_cfg(db, tenant.id)

        # 0) –ü–æ–¥–ø–∏—Å–∫–∞
        if cfg.require_subscription:
            ok = await is_user_subscribed(bot, tenant.channel_url or "", user.tg_user_id)
            if not ok:
                await render_subscribe(bot, tenant, user)
                db.commit()
                return

        # –î–æ—Å—Ç—É–ø
        if user.step == UserStep.deposited or (not cfg.require_deposit and user.step >= UserStep.registered):
            if user.step != UserStep.deposited and not cfg.require_deposit:
                user.step = UserStep.deposited
            text, img = tget(db, tenant.id, "unlocked", locale, default_text("unlocked", locale))
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª" if locale == "ru" else "üìà Get signal",
                            web_app=WebAppInfo(url=tenant_miniapp_url(tenant, user)),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if locale == "ru" else "üè† Main menu", callback_data="menu:main"
                        )
                    ],
                ]
            )
            await send_screen(bot, user, "unlocked", locale, text, kb, img)

        else:
            if user.step in (UserStep.new, UserStep.asked_reg):
                text, img = tget(db, tenant.id, "step1", locale, default_text("step1", locale))
                url = f"{settings.service_host}/r/reg?tenant_id={tenant.id}&uid={user.tg_user_id}"
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üü¢  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" if locale == "ru" else "üü¢  Register", url=url)],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if locale == "ru" else "üè† Main menu", callback_data="menu:main")],
                    ]
                )
                user.step = UserStep.asked_reg
                await send_screen(bot, user, "step1", locale, text, kb, img)

            else:
                text, img = tget(db, tenant.id, "step2", locale, default_text("step2", locale))
                text = text.replace("{{min_dep}}", str(cfg.min_deposit))

                dep_total = get_deposit_total(db, tenant.id, user)
                left = max(0, cfg.min_deposit - dep_total)
                progress_line = (
                    f"\n\nüíµ –í–Ω–µ—Å–µ–Ω–æ: ${dep_total} / ${cfg.min_deposit} (–æ—Å—Ç–∞–ª–æ—Å—å ${left})"
                    if locale == "ru"
                    else f"\n\nüíµ Paid: ${dep_total} / ${cfg.min_deposit} (left ${left})"
                )
                text = text + progress_line

                # VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
                try:
                    if dep_total >= int(cfg.vip_threshold or 500) and not getattr(user, "vip_notified", False):
                        msg_txt = (
                            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–µ–º–∏—É–º-–±–æ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                            if locale == "ru" else
                            "üéâ Congrats! You‚Äôre eligible for the premium bot. Please contact support to get access."
                        )
                        await bot.send_message(user.tg_user_id, msg_txt)
                        user.vip_notified = True
                except Exception as e:
                    print(f"[vip-notify] {e}")

                url = f"{settings.service_host}/r/dep?tenant_id={tenant.id}&uid={user.tg_user_id}"
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç" if locale == "ru" else "üí≥ Deposit", url=url)],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if locale == "ru" else "üè† Main menu", callback_data="menu:main")],
                    ]
                )
                user.step = UserStep.asked_deposit
                await send_screen(bot, user, "step2", locale, text, kb, img)

        db.commit()
    finally:
        db.close()

# --------------------------------- ADMIN FSM ---------------------------------
class TenantGate(BaseMiddleware):
    def __init__(self, tenant_id: int):
        super().__init__()
        self.tenant_id = tenant_id

    async def __call__(self, handler, event, data):
        try:
            db = SessionLocal()
            try:
                t = db.query(Tenant).filter(Tenant.id == self.tenant_id).first()
                status = t.status if t else TenantStatus.deleted
            finally:
                db.close()

            if status != TenantStatus.active:
                if isinstance(event, Message):
                    await event.answer("‚è∏ –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ / —É–¥–∞–ª—ë–Ω.")
                elif isinstance(event, CallbackQuery):
                    await event.answer("‚è∏ –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ / —É–¥–∞–ª—ë–Ω.", show_alert=False)
                return
        except Exception as e:
            # –í–ê–ñ–ù–û: –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è! –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
            print(f"[TenantGate] error: {e}")

        return await handler(event, data)


class AdminForm(StatesGroup):
    waiting_support = State()
    waiting_ref = State()
    waiting_dep = State()
    waiting_miniapp = State()
    waiting_channel = State()

    # VIP
    vip_wait_user_id = State()
    vip_wait_url = State()
    vip_wait_threshold = State()
    vip_wait_miniapp_url = State()
    vip_wait_miniapp_uid = State()

    content_wait_lang = State()
    content_wait_key = State()
    content_wait_text = State()
    content_wait_photo = State()

    bcast_wait_segment = State()
    bcast_wait_content = State()
    bcast_confirm = State()

    params_wait_min_dep = State()

def kb_admin_main():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∏", callback_data="adm:links")],
            [InlineKeyboardButton(text="üîÅ –ü–æ—Å—Ç–±—ç–∫–∏", callback_data="adm:pb")],
            [InlineKeyboardButton(text="üß© –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="adm:content")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="adm:params")],
            [InlineKeyboardButton(text="üëë VIP", callback_data="adm:vip")],
            [InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="adm:broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="adm:stats")],
        ]
    )

def kb_admin_links():
    return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Support URL",     callback_data="adm:set:support")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –†–µ—Ñ. —Å—Å—ã–ª–∫—É",     callback_data="adm:set:ref")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–µ–ø–æ–∑–∏—Ç–∞", callback_data="adm:set:dep")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Web-app URL",     callback_data="adm:set:miniapp")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞",   callback_data="adm:set:channel")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",                    callback_data="adm:menu")],
        ]
    )

def kb_content_lang():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ RU", callback_data="adm:cl:ru"),
             InlineKeyboardButton(text="üá¨üáß EN", callback_data="adm:cl:en")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:menu")],
        ]
    )

def kb_content_keys(locale: str):
    rows = [[InlineKeyboardButton(text=f"‚Ä¢ {key_title(k, locale)}", callback_data=f"adm:ck:{k}:{locale}")]
            for k, _ in KEYS]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:content")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_content_edit(key: str, locale: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"adm:ce:text:{key}:{locale}")],
            [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"adm:ce:photo:{key}:{locale}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"adm:ce:delphoto:{key}:{locale}")],
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"adm:ce:reset:{key}:{locale}")],
            [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"adm:ce:preview:{key}:{locale}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:content")],
        ]
    )

def kb_params(cfg: TenantConfig):
    req_sub = getattr(cfg, "require_subscription", False)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=("‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" if req_sub else "‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
                    callback_data="adm:param:toggle_sub",
                )
            ],
            [
                InlineKeyboardButton(
                    text=("‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç" if cfg.require_deposit else "‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç"),
                    callback_data="adm:param:toggle_dep",
                )
            ],
            [InlineKeyboardButton(text=f"üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${cfg.min_deposit}", callback_data="adm:param:set_min")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å —Å—Ç–æ–∫–æ–≤—É—é Web-app", callback_data="adm:param:stock_miniapp")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:menu")],
        ]
    )

def kb_broadcast_segments():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –í—Å–µ", callback_data="adm:bs:all"),
                InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å", callback_data="adm:bs:registered"),
                InlineKeyboardButton(text="üí∞ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º", callback_data="adm:bs:deposited"),
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:menu")],
        ]
    )

def editor_status_text(db, tenant_id: int, key: str, lang: str) -> str:
    tt = db.query(TenantText).filter(
        TenantText.tenant_id == tenant_id, TenantText.locale == lang, TenantText.key == key
    ).first()
    text_len = len(tt.text) if tt and tt.text else 0
    has_img = bool(tt and tt.image_file_id)
    return (
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>{key_title(key, lang)}</b> ({lang})\n"
        f"–¢–µ–∫—Å—Ç: {text_len} —Å–∏–º–≤–æ–ª(–æ–≤)\n"
        f"–ö–∞—Ä—Ç–∏–Ω–∫–∞: {'–µ—Å—Ç—å' if has_img else '–Ω–µ—Ç'}"
    )

# ---------------------------- –ó–ê–ü–£–°–ö –î–ï–¢–°–ö–û–ì–û –ë–û–¢–ê ----------------------------
async def run_child_bot(tenant: Tenant):
    bot = Bot(token=tenant.child_bot_token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=MemoryStorage())
    r = Router()
    r.message.outer_middleware(TenantGate(tenant.id))
    r.callback_query.outer_middleware(TenantGate(tenant.id))

    # -------- PUBLIC --------
    @r.message(Command("start"))
    async def on_start(msg: Message):
        db = SessionLocal()
        try:
            user = db.query(User).filter(
                User.tenant_id == tenant.id,
                User.tg_user_id == msg.from_user.id
            ).first()
            if not user:
                user = User(tenant_id=tenant.id, tg_user_id=msg.from_user.id)
                db.add(user)
                try:
                    db.commit()
                except Exception:
                    db.rollback()
                    user = db.query(User).filter(
                        User.tenant_id == tenant.id,
                        User.tg_user_id == msg.from_user.id
                    ).first()

            if user.lang:
                await render_main(bot, tenant, user)
                return

            await render_lang_screen(bot, tenant, user, current_lang=None)
        finally:
            db.close()

    @r.message(F.text == "/resetme")
    async def reset_me(msg: Message):
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.tenant_id == tenant.id,
                                         User.tg_user_id == msg.from_user.id).first()
            if not user:
                await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            user.step = UserStep.new
            user.trader_id = None
            db.commit()
        finally:
            db.close()
        await msg.answer("‚ôªÔ∏è –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞–∂–º–∏ ¬´üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª –∏ –ø—Ä–æ–π–¥–∏ —à–∞–≥–∏ –∑–∞–Ω–æ–≤–æ.")

    @r.callback_query(lambda c: c.data and c.data.startswith("lang:"))
    async def on_lang(cb: CallbackQuery):
        lang = cb.data.split(":")[1]
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.tenant_id == tenant.id,
                                         User.tg_user_id == cb.from_user.id).first()
            if not user:
                user = User(tenant_id=tenant.id, tg_user_id=cb.from_user.id, lang=lang)
                db.add(user)
                db.commit()
            else:
                user.lang = lang
                db.commit()
            await render_main(bot, tenant, user)
            db.commit()
            await cb.answer()
        finally:
            db.close()

    @r.callback_query(F.data == "menu:main")
    async def on_main(cb: CallbackQuery):
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.tenant_id == tenant.id,
                                         User.tg_user_id == cb.from_user.id).first()
            if not user:
                await cb.answer()
                return
            await render_main(bot, tenant, user)
            db.commit()
            await cb.answer()
        finally:
            db.close()

    @r.callback_query(F.data == "menu:guide")
    async def on_guide(cb: CallbackQuery):
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.tenant_id == tenant.id,
                                         User.tg_user_id == cb.from_user.id).first()
            if not user:
                return
            await render_guide(bot, tenant, user)
            db.commit()
            await cb.answer()
        finally:
            db.close()

    @r.callback_query(F.data == "menu:lang")
    async def on_menu_lang(cb: CallbackQuery):
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.tenant_id == tenant.id,
                                         User.tg_user_id == cb.from_user.id).first()
            if not user:
                return
            await render_lang_screen(bot, tenant, user, user.lang)
            db.commit()
            await cb.answer()
        finally:
            db.close()

    @r.callback_query(F.data == "menu:subcheck")
    async def on_subcheck(cb: CallbackQuery):
        db = SessionLocal()
        try:
            user = db.query(User).filter(
                User.tenant_id == tenant.id,
                User.tg_user_id == cb.from_user.id
            ).first()
            if not user:
                await cb.answer()
                return

            locale = user.lang or tenant.lang_default or "ru"
            cfg = get_cfg(db, tenant.id)

            ok = await is_user_subscribed(bot, tenant.channel_url or "", user.tg_user_id)
            if not ok:
                # –≤—Å—ë –µ—â—ë –Ω–µ—Ç
                await cb.answer("–ï—â—ë –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É ü§∑‚Äç‚ôÇÔ∏è" if locale == "ru" else "Still not subscribed ü§∑‚Äç‚ôÇÔ∏è",
                                show_alert=False)
                return

            # –û–∫ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            await render_get(bot, tenant, user)
            db.commit()
            await cb.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ" if locale == "ru" else "All set ‚úÖ")
        finally:
            db.close()

    @r.callback_query(F.data == "menu:get")
    async def on_get(cb: CallbackQuery):
        db = SessionLocal()
        try:
            user = db.query(User).filter(
                User.tenant_id == tenant.id,
                User.tg_user_id == cb.from_user.id
            ).first()
            if not user:
                await cb.answer();
                return

            # –í–°–ï–ì–î–ê –∏–¥—ë–º —á–µ—Ä–µ–∑ render_get (–æ–Ω —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç unlocked —Å web_app)
            await render_get(bot, tenant, user)
            db.commit()
            await cb.answer()
        finally:
            db.close()

    # -------- ADMIN --------
    def owner_only(uid: int) -> bool:
        return uid == tenant.owner_tg_id  # —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –¢–ï–ù–ê–ù–¢–ê

    @r.message(Command("admin"))
    async def admin_entry(msg: Message, state: FSMContext):
        print(f"[child-admin] /admin from={msg.from_user.id} tenant_id={tenant.id} owner={tenant.owner_tg_id}")
        if not owner_only(msg.from_user.id):
            await msg.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (–≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –±–æ—Ç–∞)")
            return
        await state.clear()
        await msg.answer("<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=kb_admin_main())

    @r.callback_query(
        lambda c: (
                c.data in {"adm:menu", "adm:links", "adm:pb", "adm:content", "adm:broadcast", "adm:stats", "adm:params","adm:vip"}
                or (c.data or "").startswith("adm:set:")
                or (
                    (c.data or "").startswith("adm:vip:")
                    and not any((c.data or "").startswith(p) for p in (
                        "adm:vip:do:",        # –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: —Ä—É—á–Ω—ã–µ –ø–æ—Å—Ç–±—ç–∫–∏
                        "adm:vip:url:ask:",   # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä: –∑–∞–ø—Ä–æ—Å VIP URL (–ø–æ TG ID)
                    ))
                )
             )
        )
    async def admin_router(cb: CallbackQuery, state: FSMContext):
        if not owner_only(cb.from_user.id):
            await cb.answer()
            return

        data = cb.data or ""
        action = data.split(":", 1)[1] if not data.startswith("adm:set:") else "set:" + data.split(":", 2)[2]

        if action == "menu":
            await state.clear()
            await cb.message.edit_text("<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=kb_admin_main())
            await cb.answer()
            return

        if action == "links":
            await state.clear()
            await cb.message.edit_text("üîó –°—Å—ã–ª–∫–∏", reply_markup=kb_admin_links())
            await cb.answer()
            return

        if action == "content":
            await state.clear()
            await cb.message.edit_text("üß© –ö–æ–Ω—Ç–µ–Ω—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=kb_content_lang())
            await cb.answer()
            return

        if action == "params":
            db = SessionLocal()
            try:
                cfg = get_cfg(db, tenant.id)
            finally:
                db.close()
            await cb.message.edit_text("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_params(cfg))
            await cb.answer()
            return

        if action == "set:support":
            await state.set_state(AdminForm.waiting_support)
            await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ <b>–Ω–æ–≤—ã–π Support URL</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n‚¨ÖÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")
            await cb.answer(); return

        if action == "set:ref":
            await state.set_state(AdminForm.waiting_ref)
            await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ <b>–Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n‚¨ÖÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")
            await cb.answer(); return

        if action == "set:dep":
            await state.set_state(AdminForm.waiting_dep)
            await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n‚¨ÖÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")
            await cb.answer(); return

        if action == "set:miniapp":
            await state.set_state(AdminForm.waiting_miniapp)
            await cb.message.edit_text(
                "–ü—Ä–∏—à–ª–∏—Ç–µ <b>Web-app URL</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
                "–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± ‚Äî –≤—ã–ª–æ–∂–∏—Ç—å –º–∏–Ω–∏-–∞–ø–ø –Ω–∞ GitHub Pages –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é HTTPS-—Å—Å—ã–ª–∫—É."
                "\n\n‚¨ÖÔ∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
            ); await cb.answer(); return

        if action == "set:channel":
            await state.set_state(AdminForm.waiting_channel)
            await cb.message.edit_text(
                "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (@username –∏–ª–∏ https://t.me/username).\n\n"
                "‚ö†Ô∏è –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫ (+...) –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π @username –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º."
            ); await cb.answer(); return

        # ----- VIP MENU
        if action == "vip":
            db = SessionLocal()
            try:
                cfg = get_cfg(db, tenant.id)
                thr = int(cfg.vip_threshold or 500)
            finally:
                db.close()
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (‚â• ${thr})", callback_data="adm:vip:list")],
                    [InlineKeyboardButton(text="üßæ –ü–æ—Å—Ç–±—ç–∫: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="adm:vip:reg")],
                    [InlineKeyboardButton(text="üí≥ –ü–æ—Å—Ç–±—ç–∫: –î–µ–ø–æ–∑–∏—Ç", callback_data="adm:vip:dep")],
                    [InlineKeyboardButton(text="‚úÖ –í—ã–¥–∞—Ç—å VIP –¥–æ—Å—Ç—É–ø", callback_data="adm:vip:grant")],
                    [InlineKeyboardButton(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏-–∞–ø–ø (–¥–ª—è –∏–º–µ—é—â–∏—Ö –¥–æ—Å—Ç—É–ø)", callback_data="adm:vip:miniapp")],
                    [InlineKeyboardButton(text="üéØ –ó–∞–¥–∞—Ç—å –ø–æ—Ä–æ–≥ VIP", callback_data="adm:vip:thr")],
                    [InlineKeyboardButton(text="üÜî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ TG ID", callback_data="adm:vip:byid")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:menu")],
                ]
            )
            await state.clear()
            await cb.message.edit_text("üëë VIP ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb)
            await cb.answer(); return

        if action == "vip:thr":
            await state.set_state(AdminForm.vip_wait_threshold)
            await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ VIP (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, $).")
            await cb.answer(); return

        if action == "vip:list":
            db = SessionLocal()
            try:
                cfg = get_cfg(db, tenant.id)
                thr = int(cfg.vip_threshold or 500)
                users = db.query(User).filter(User.tenant_id == tenant.id).all()
                rows = []
                for u in users:
                    total = get_deposit_total(db, tenant.id, u)
                    if total >= thr:
                        rows.append((u.tg_user_id, total, "‚úÖ" if u.is_vip else "‚ùå"))
                rows.sort(key=lambda x: -x[1])
                txt = f"<b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã VIP (‚â• ${thr}):</b>\n\n"
                if not rows:
                    txt += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ."
                else:
                    for tg_id, total, flag in rows[:50]:
                        txt += f"{flag} <code>{tg_id}</code> ‚Äî ${total}\n"
            finally:
                db.close()
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:vip")]])
            await cb.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
            await cb.answer(); return

        if action == "vip:reg":
            # —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            db = SessionLocal()
            try:
                users = db.query(User).filter(User.tenant_id == tenant.id).all()
                rows = []
                for u in users[:50]:
                    rows.append([InlineKeyboardButton(text=str(u.tg_user_id), callback_data=f"adm:vip:do:reg:{u.tg_user_id}")])
                if not rows:
                    rows = [[InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="adm:vip")]]
                rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:vip")])
                kb = InlineKeyboardMarkup(inline_keyboard=rows)
            finally:
                db.close()
            await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (—Ä—É—á–Ω–æ–π –ø–æ—Å—Ç–±—ç–∫):", reply_markup=kb)
            await cb.answer(); return

        if action == "vip:dep":
            db = SessionLocal()
            try:
                users = db.query(User).filter(User.tenant_id == tenant.id).all()
                rows = []
                for u in users[:50]:
                    rows.append([InlineKeyboardButton(text=str(u.tg_user_id), callback_data=f"adm:vip:do:dep:{u.tg_user_id}")])
                if not rows:
                    rows = [[InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="adm:vip")]]
                rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:vip")])
                kb = InlineKeyboardMarkup(inline_keyboard=rows)
            finally:
                db.close()
            await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –î–ï–ü–û–ó–ò–¢–ê (—Ä—É—á–Ω–æ–π –ø–æ—Å—Ç–±—ç–∫):", reply_markup=kb)
            await cb.answer(); return

        if action == "vip:grant":
            db = SessionLocal()
            try:
                users = db.query(User).filter(User.tenant_id == tenant.id).all()
                rows = []
                for u in users[:50]:
                    rows.append([InlineKeyboardButton(text=str(u.tg_user_id), callback_data=f"adm:vip:set:{u.tg_user_id}")])
                if not rows:
                    rows = [[InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="adm:vip")]]
                rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:vip")])
                kb = InlineKeyboardMarkup(inline_keyboard=rows)
            finally:
                db.close()
            await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –í–´–î–ê–ß–ò VIP:", reply_markup=kb)
            await cb.answer(); return

        if action == "vip:miniapp":
            # —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø (is_vip True –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥)
            db = SessionLocal()
            try:
                cfg = get_cfg(db, tenant.id)
                thr = int(cfg.vip_threshold or 500)
                users = db.query(User).filter(User.tenant_id == tenant.id).all()
                rows = []
                for u in users:
                    total = get_deposit_total(db, tenant.id, u)
                    if u.is_vip or total >= thr:
                        label = f"{u.tg_user_id} ({'VIP' if u.is_vip else f'${total}'})"
                        rows.append([InlineKeyboardButton(text=label, callback_data=f"adm:vip:miniapp:set:{u.tg_user_id}")])
                rows = rows[:50] if rows else [[InlineKeyboardButton(text="–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º", callback_data="adm:vip")]]
                rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:vip")])
                kb = InlineKeyboardMarkup(inline_keyboard=rows)
            finally:
                db.close()
            await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è VIP –º–∏–Ω–∏-–∞–ø–ø—ã:", reply_markup=kb)
            await cb.answer(); return

        if action.startswith("vip:miniapp:set:"):
            uid = int(action.split(":")[-1])
            db = SessionLocal()
            try:
                u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
                if not u:
                    await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"); db.close(); return
                # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                has_vip = bool(u.is_vip)
                has_custom = bool(u.vip_miniapp_url)
            finally:
                db.close()

            # –ö–Ω–æ–ø–∫–∏: –≤—ã–¥–∞—Ç—å VIP –∏–∑ ENV, –∑–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π, –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–æ–∫–æ–≤—É—é –æ–±—ã—á–Ω—É—é
            rows = [
                [InlineKeyboardButton(text="üü£ –í—ã–¥–∞—Ç—å VIP-–º–∏–Ω–∏-–∞–ø–ø (ENV)", callback_data=f"adm:vip:miniapp:env:{uid}")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π VIP URL",  callback_data=f"adm:vip:miniapp:ask:{uid}")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å —Å—Ç–æ–∫–æ–≤—É—é –º–∏–Ω–∏-–∞–ø–ø", callback_data=f"adm:vip:miniapp:stock:{uid}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:vip:miniapp")],
            ]
            status = []
            if has_vip: status.append("VIP=‚úÖ")
            if has_custom: status.append("Custom URL=‚úÖ")
            if not status: status.append("–æ–±—ã—á–Ω–∞—è –º–∏–Ω–∏-–∞–ø–ø")
            title = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{uid}</code>\n–¢–µ–∫—É—â–µ–µ: " + ", ".join(status)

            await cb.message.edit_text(title, reply_markup=InlineKeyboardMarkup(inline_keyboard=rows), disable_web_page_preview=True)
            await cb.answer(); return

        if action.startswith("vip:miniapp:env:"):
            uid = int(action.split(":")[-1])
            db = SessionLocal()
            try:
                u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
                if not u:
                    await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"); db.close(); return
                u.is_vip = True          # –≤–∫–ª—é—á–∞–µ–º VIP
                u.vip_miniapp_url = None # –ø—É—Å—Ç—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ ENV (settings.vip_miniapp_url)
                db.commit()
            finally:
                db.close()
            await cb.message.edit_text("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ VIP-–º–∏–Ω–∏-–∞–ø–ø –∏–∑ ENV. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç VIP –ø—Ä–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª.",
                                       reply_markup=kb_admin_main())
            await cb.answer("–ì–æ—Ç–æ–≤–æ"); return

        if action.startswith("vip:miniapp:ask:"):
            uid = int(action.split(":")[-1])
            await state.update_data(vip_user_id=uid)
            await state.set_state(AdminForm.vip_wait_miniapp_url)
            await cb.message.edit_text(
                f"–ü—Ä–∏—à–ª–∏—Ç–µ VIP Web-app URL –¥–ª—è <code>{uid}</code> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                f"–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å, –ø—Ä–∏—à–ª–∏—Ç–µ ¬´-¬ª.")
            await cb.answer(); return

        if action.startswith("vip:miniapp:stock:"):
            uid = int(action.split(":")[-1])
            db = SessionLocal()
            try:
                u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
                if not u:
                    await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"); db.close(); return
                u.vip_miniapp_url = None  # —É–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º
                u.is_vip = False          # –≤—ã–∫–ª—é—á–∞–µ–º VIP ‚Üí –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–±—ã—á–Ω–∞—è –º–∏–Ω–∏-–∞–ø–ø (tenant/ENV)
                db.commit()
            finally:
                db.close()
            await cb.message.edit_text("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª –æ–±—ã—á–Ω—É—é –º–∏–Ω–∏-–∞–ø–ø. –¢–µ–ø–µ—Ä—å ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ-VIP –≤–µ—Ä—Å–∏—é.",
                                       reply_markup=kb_admin_main())
            await cb.answer("–ì–æ—Ç–æ–≤–æ"); return

        if action == "vip:byid":
            await state.set_state(AdminForm.vip_wait_user_id)
            await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await cb.answer(); return

        if action.startswith("vip:set:"):
            uid = int(action.split(":")[2])
            db = SessionLocal()
            try:
                u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
                if not u:
                    await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"); db.close(); return

                u.is_vip = True
                u.vip_notified = True  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–ª–µ–µ
                db.commit()
            finally:
                db.close()

            # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                locale = u.lang or tenant.lang_default or "ru"
                if locale == "ru":
                    text = "üéâ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-–±–æ—Ç—É! –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                else:
                    text = "üéâ You‚Äôve been granted access to the premium bot! Contact support to get connected."

                kb = None
                if tenant.support_url:
                    kb = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if locale == "ru" else "üÜò Support",
                                              url=tenant.support_url)]
                    ])

                await bot.send_message(uid, text, reply_markup=kb)
            except Exception:
                pass

            await cb.answer("VIP –≤–∫–ª—é—á—ë–Ω"); return

        if action.startswith("vip:unset:"):
            uid = int(action.split(":")[2])
            db = SessionLocal()
            try:
                u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
                if not u:
                    await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"); db.close(); return
                u.is_vip = False
                db.commit()
            finally:
                db.close()
            await cb.answer("VIP –≤—ã–∫–ª—é—á–µ–Ω"); return

        if action.startswith("vip:url:clear:"):
            uid = int(action.split(":")[3])
            db = SessionLocal()
            try:
                u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
                if not u:
                    await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"); db.close(); return
                u.vip_miniapp_url = None
                db.commit()
            finally:
                db.close()
            await cb.answer("URL –æ—á–∏—â–µ–Ω"); return

        if action == "pb":
            db = SessionLocal()
            try:
                cfg = get_cfg(db, tenant.id)
            finally:
                db.close()
            secret = tenant.postback_secret or settings.global_postback_secret
            base = settings.service_host
            reg = f"{base}/pb?tenant_id={tenant.id}&event=registration&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}"
            txt = (
                "<b>–ü–æ—Å—Ç–±—ç–∫–∏ Pocket Option</b>\n\n"
                "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n"
                f"<code>{reg}</code>\n"
                "–ú–∞–∫—Ä–æ—Å—ã –≤ PP (1-–≤-1):\n"
                "‚Ä¢ click_id ‚Üí <code>click_id</code>\n"
                "‚Ä¢ trader_id ‚Üí <code>trader_id</code>\n\n"
            )
            if cfg.require_deposit:
                dep = f"{base}/pb?tenant_id={tenant.id}&event=deposit&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}&sum={{sumdep}}"
                txt += (
                    "üí≥ <b>–î–µ–ø–æ–∑–∏—Ç</b>\n"
                    f"<code>{dep}</code>\n"
                    "–ú–∞–∫—Ä–æ—Å—ã –≤ PP (1-–≤-1):\n"
                    "‚Ä¢ click_id ‚Üí <code>click_id</code>\n"
                    "‚Ä¢ trader_id ‚Üí <code>trader_id</code>\n"
                    "‚Ä¢ sumdep ‚Üí <code>sum</code>\n\n"
                    f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${cfg.min_deposit}."
                )
            else:
                txt += "‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞."

            await cb.message.edit_text(
                txt,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:menu")]]
                ),
                disable_web_page_preview=True,
            )
            await cb.answer()
            return

        if action == "broadcast":
            await state.set_state(AdminForm.bcast_wait_segment)
            await cb.message.edit_text("üì£ –†–∞—Å—Å—ã–ª–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç", reply_markup=kb_broadcast_segments())
            await cb.answer()
            return

        if action == "stats":
            db = SessionLocal()
            try:
                total = db.query(User).filter(User.tenant_id == tenant.id).count()
                reg = db.query(User).filter(User.tenant_id == tenant.id, User.step >= UserStep.registered).count()
                dep = db.query(User).filter(User.tenant_id == tenant.id, User.step == UserStep.deposited).count()
            finally:
                db.close()
            await cb.message.edit_text(
                f"üë• –í—Å–µ–≥–æ: {total}\nüìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {reg}\n‚úÖ –° –¥–æ—Å—Ç—É–ø–æ–º: {dep}\nüí∞ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {dep}",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:menu")]]
                ),
            )
            await cb.answer()
            return

    # ---------- ADMIN: —Ä—É—á–Ω—ã–µ –ø–æ—Å—Ç–±—ç–∫–∏ (VIP) ----------

    # ---- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (—Ä—É—á–Ω–æ–π –ø–æ—Å—Ç–±—ç–∫)
    @r.callback_query(lambda c: c.data and c.data.startswith("adm:vip:do:reg:"))
    async def vip_do_registration(cb: CallbackQuery):
        if cb.from_user.id != tenant.owner_tg_id:
            await cb.answer()
            return
        try:
            uid = int(cb.data.split(":")[-1])
        except Exception:
            await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID")
            return

        db = SessionLocal()
        try:
            u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
            if not u:
                await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            pb = Postback(
                tenant_id=tenant.id,
                event="registration",
                click_id=str(uid),
                trader_id=u.trader_id,
                sum=0,
                token_ok=True,
                idempotency_key=f"adm:reg:{tenant.id}:{uid}",
                raw_query="manual",
            )
            db.add(pb)

            if u.step in (UserStep.new, UserStep.asked_reg):
                u.step = UserStep.registered

            db.commit()
        finally:
            db.close()

        try:
            await cb.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—Å—á–∏—Ç–∞–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                                       reply_markup=kb_admin_main())
        except Exception:
            pass
        await cb.answer("OK")

    # ---- –î–ï–ü–û–ó–ò–¢ (—Ä—É—á–Ω–æ–π –ø–æ—Å—Ç–±—ç–∫)
    @r.callback_query(lambda c: c.data and c.data.startswith("adm:vip:do:dep:"))
    async def vip_do_deposit(cb: CallbackQuery):
        if cb.from_user.id != tenant.owner_tg_id:
            await cb.answer()
            return
        try:
            uid = int(cb.data.split(":")[-1])
        except Exception:
            await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID")
            return

        db = SessionLocal()
        try:
            u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
            if not u:
                await cb.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            cfg = get_cfg(db, tenant.id)
            amount = int(cfg.min_deposit or 50)

            pb = Postback(
                tenant_id=tenant.id,
                event="deposit",
                click_id=str(uid),
                trader_id=u.trader_id,
                sum=amount,
                token_ok=True,
                idempotency_key=f"adm:dep:{tenant.id}:{uid}:{amount}",
                raw_query="manual",
            )
            db.add(pb)
            db.commit()

            total = get_deposit_total(db, tenant.id, u)
            if total >= cfg.min_deposit and u.step != UserStep.deposited:
                u.step = UserStep.deposited

            db.commit()
            # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å—Ä–∞–∑—É –¥–∞–¥–∏–º –∫–Ω–æ–ø–∫—É WebApp
            try:
                locale = u.lang or tenant.lang_default or "ru"
                text, img = tget(db, tenant.id, "unlocked", locale, default_text("unlocked", locale))
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª" if locale == "ru" else "üìà Get signal",
                            web_app=WebAppInfo(url=tenant_miniapp_url(tenant, u))
                        )],
                        [InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if locale == "ru" else "üè† Main menu",
                            callback_data="menu:main"
                        )],
                    ]
                )
                await send_screen(bot, u, "unlocked", locale, text, kb, img)
                db.commit()  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π last_message_id
            except Exception as e:
                print(f"[manual-dep unlocked notify] {e}")

            thr = int(getattr(cfg, "vip_threshold", 500) or 500)
            if total >= thr and not getattr(u, "vip_notified", False):
                try:
                    locale = u.lang or tenant.lang_default or "ru"
                    msg_txt = (
                        "üéâ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-–±–æ—Ç—É! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å."
                        if locale == "ru" else
                        "üéâ You‚Äôre eligible for the premium bot! Send /start to activate."
                    )
                    await bot.send_message(uid, msg_txt)
                except Exception:
                    pass
                u.vip_notified = True

            db.commit()
        finally:
            db.close()

        try:
            await cb.message.edit_text("‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞—Å—á–∏—Ç–∞–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                                       reply_markup=kb_admin_main())
        except Exception:
            pass
        await cb.answer("OK")

    # ---- Admin: –≤–≤–æ–¥ —Å—Å—ã–ª–æ–∫
    @r.message(AdminForm.waiting_support)
    async def on_support_input(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        url = (msg.text or "").strip()
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tenant.id).first()
            t.support_url = url
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer("‚úÖ Support URL –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=kb_admin_main())

    @r.message(AdminForm.waiting_miniapp)
    async def on_miniapp_input(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        url = (msg.text or "").strip()
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tenant.id).first()
            t.miniapp_url = url
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer("‚úÖ Web-app URL –æ–±–Ω–æ–≤–ª—ë–Ω. –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –º–∏–Ω–∏-–∞–ø–ø—É.",
                         reply_markup=kb_admin_main())

    @r.message(AdminForm.waiting_ref)
    async def on_ref_input(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        ref = (msg.text or "").strip()
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tenant.id).first()
            t.ref_link = ref
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=kb_admin_main())

    @r.message(AdminForm.waiting_dep)
    async def on_dep_input(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        dep = (msg.text or "").strip()
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tenant.id).first()
            t.deposit_link = dep
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer("‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=kb_admin_main())

    @r.message(AdminForm.waiting_channel)
    async def on_channel_input(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        url = (msg.text or "").strip()
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tenant.id).first()
            t.channel_url = url
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer("‚úÖ –°—Å—ã–ª–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=kb_admin_main())

    # ---- VIP: –∑–∞–¥–∞—Ç—å –ø–æ—Ä–æ–≥
    @r.message(AdminForm.vip_wait_threshold)
    async def vip_set_threshold(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        try:
            val = int((msg.text or "").strip())
            if val < 1:
                raise ValueError
        except Exception:
            await msg.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        db = SessionLocal()
        try:
            cfg = get_cfg(db, tenant.id)
            cfg.vip_threshold = val
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer(f"‚úÖ –ü–æ—Ä–æ–≥ VIP –æ–±–Ω–æ–≤–ª—ë–Ω: ${val}.", reply_markup=kb_admin_main())

    # ---- VIP By ID
    @r.message(AdminForm.vip_wait_user_id)
    async def vip_receive_user_id(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        try:
            uid = int((msg.text or "").strip())
        except Exception:
            await msg.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ (TG ID). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        db = SessionLocal()
        try:
            u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
            if not u:
                await state.clear()
                await msg.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
                return
            total = get_deposit_total(db, tenant.id, u)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å VIP", callback_data=f"adm:vip:set:{uid}"),
                 InlineKeyboardButton(text="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å VIP", callback_data=f"adm:vip:unset:{uid}")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–¥–∞—Ç—å VIP URL", callback_data=f"adm:vip:url:ask:{uid}")],
                [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å URL", callback_data=f"adm:vip:url:clear:{uid}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm:vip")],
            ])
            txt = (
                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{uid}</code>\n"
                f"VIP: {'‚úÖ' if u.is_vip else '‚ùå'}\n"
                f"VIP URL: {u.vip_miniapp_url or '‚Äî'}\n"
                f"–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${total}"
            )
            await msg.answer(txt, reply_markup=kb, disable_web_page_preview=True)
        finally:
            db.close()

    @r.callback_query(F.data.startswith("adm:vip:url:ask:"))
    async def vip_ask_url(cb: CallbackQuery, state: FSMContext):
        uid = int(cb.data.split(":")[-1])
        await state.update_data(vip_user_id=uid)
        await state.set_state(AdminForm.vip_wait_url)
        await cb.message.edit_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ VIP Web-app URL –¥–ª—è <code>{uid}</code> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        await cb.answer()

    @r.message(AdminForm.vip_wait_url)
    async def vip_set_url(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        data = await state.get_data()
        uid = data.get("vip_user_id")
        url = (msg.text or "").strip()
        db = SessionLocal()
        try:
            u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
            if not u:
                await state.clear()
                await msg.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
                return
            u.vip_miniapp_url = url
            db.commit()
            await state.clear()
            await msg.answer("‚úÖ VIP URL —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=kb_admin_main())
        finally:
            db.close()

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏-–∞–ø–ø—ã –∏–∑ –º–µ–Ω—é ¬´–¥–ª—è –∏–º–µ—é—â–∏—Ö –¥–æ—Å—Ç—É–ø¬ª
    @r.message(AdminForm.vip_wait_miniapp_url)
    async def vip_set_miniapp_from_menu(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        data = await state.get_data()
        uid = data.get("vip_user_id")
        url = (msg.text or "").strip()
        db = SessionLocal()
        try:
            u = db.query(User).filter(User.tenant_id == tenant.id, User.tg_user_id == uid).first()
            if not u:
                await state.clear()
                await msg.answer("–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_admin_main())
                return
            if url == "-":
                u.vip_miniapp_url = None
            else:
                u.vip_miniapp_url = url
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer("‚úÖ –ú–∏–Ω–∏-–∞–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –õ–°, —á—Ç–æ–±—ã –æ–Ω –Ω–∞–∂–∞–ª /start.", reply_markup=kb_admin_main())

    # ---- Admin: –ö–æ–Ω—Ç–µ–Ω—Ç
    @r.callback_query(lambda c: c.data and c.data.startswith("adm:cl:"))
    async def content_choose_lang(cb: CallbackQuery, state: FSMContext):
        lang = cb.data.split(":")[2]
        await state.update_data(content_lang=lang)
        await state.set_state(AdminForm.content_wait_key)
        await cb.message.edit_text("üß© –ö–æ–Ω—Ç–µ–Ω—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Ä–∞–Ω", reply_markup=kb_content_keys(lang))
        await cb.answer()

    @r.callback_query(lambda c: c.data and c.data.startswith("adm:ck:"))
    async def content_choose_key(cb: CallbackQuery, state: FSMContext):
        _, _, key, lang = cb.data.split(":")
        await state.update_data(content_lang=lang, content_key=key)
        db = SessionLocal()
        try:
            summary = editor_status_text(db, tenant.id, key, lang)
        finally:
            db.close()
        await cb.message.edit_text(summary, reply_markup=kb_content_edit(key, lang))
        await cb.answer()

    @r.callback_query(lambda c: c.data and c.data.startswith("adm:ce:text:"))
    async def content_edit_text(cb: CallbackQuery, state: FSMContext):
        _, _, _, key, lang = cb.data.split(":")
        await state.update_data(content_lang=lang, content_key=key)
        await state.set_state(AdminForm.content_wait_text)
        await cb.message.edit_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ <b>–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç</b> –¥–ª—è ¬´{key_title(key, lang)}¬ª ({lang}) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        await cb.answer()

    @r.message(AdminForm.content_wait_text)
    async def on_content_text(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        data = await state.get_data()
        lang = data["content_lang"]
        key = data["content_key"]
        db = SessionLocal()
        try:
            tt = db.query(TenantText).filter(
                TenantText.tenant_id == tenant.id, TenantText.locale == lang, TenantText.key == key
            ).first()
            if not tt:
                tt = TenantText(tenant_id=tenant.id, locale=lang, key=key, text=msg.text or "")
                db.add(tt)
            else:
                tt.text = msg.text or ""
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è ¬´{key_title(key, lang)}¬ª ({lang}).", reply_markup=kb_content_edit(key, lang))

    @r.callback_query(lambda c: c.data and c.data.startswith("adm:ce:photo:"))
    async def content_edit_photo(cb: CallbackQuery, state: FSMContext):
        _, _, _, key, lang = cb.data.split(":")
        await state.update_data(content_lang=lang, content_key=key)
        await state.set_state(AdminForm.content_wait_photo)
        await cb.message.edit_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–æ—Ç–æ</b> –¥–ª—è ¬´{key_title(key, lang)}¬ª ({lang}).")
        await cb.answer()

    @r.message(AdminForm.content_wait_photo)
    async def on_content_photo(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        if not msg.photo:
            await msg.answer("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
            return
        file_id = msg.photo[-1].file_id
        data = await state.get_data()
        lang = data["content_lang"]
        key = data["content_key"]
        db = SessionLocal()
        try:
            tt = db.query(TenantText).filter(
                TenantText.tenant_id == tenant.id, TenantText.locale == lang, TenantText.key == key
            ).first()
            if not tt:
                tt = TenantText(tenant_id=tenant.id, locale=lang, key=key, image_file_id=file_id)
                db.add(tt)
            else:
                tt.image_file_id = file_id
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è ¬´{key_title(key, lang)}¬ª ({lang}).", reply_markup=kb_content_edit(key, lang))

    @r.callback_query(lambda c: c.data and c.data.startswith("adm:ce:delphoto:"))
    async def content_delete_photo(cb: CallbackQuery, state: FSMContext):
        _, _, _, key, lang = cb.data.split(":")
        db = SessionLocal()
        try:
            tt = db.query(TenantText).filter(
                TenantText.tenant_id == tenant.id, TenantText.locale == lang, TenantText.key == key
            ).first()
            if tt and tt.image_file_id:
                tt.image_file_id = None
                db.commit()
                msg = f"üóë –ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è ¬´{key_title(key, lang)}¬ª ({lang})."
            else:
                msg = f"–ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –±—ã–ª–æ –¥–ª—è ¬´{key_title(key, lang)}¬ª ({lang})."
        finally:
            db.close()
        await cb.message.edit_text(msg, reply_markup=kb_content_edit(key, lang))
        await cb.answer()

    @r.callback_query(lambda c: c.data and c.data.startswith("adm:ce:reset:"))
    async def content_reset(cb: CallbackQuery, state: FSMContext):
        _, _, _, key, lang = cb.data.split(":")
        db = SessionLocal()
        try:
            tt = db.query(TenantText).filter(
                TenantText.tenant_id == tenant.id, TenantText.locale == lang, TenantText.key == key
            ).first()
            if tt:
                db.delete(tt)
                db.commit()
        finally:
            db.close()
        await cb.message.edit_text(
            f"üîÑ –°–±—Ä–æ—à–µ–Ω–æ –∫ –¥–µ—Ñ–æ–ª—Ç—É –¥–ª—è ¬´{key_title(key, lang)}¬ª ({lang}).", reply_markup=kb_content_edit(key, lang)
        )
        await cb.answer()

    @r.callback_query(lambda c: c.data and c.data.startswith("adm:ce:preview:"))
    async def content_preview(cb: CallbackQuery, state: FSMContext):
        _, _, _, key, lang = cb.data.split(":")
        db = SessionLocal()
        try:
            text, img = tget(db, tenant.id, key, lang, default_text(key, lang))
            cfg = get_cfg(db, tenant.id)
            if key == "step2":
                text = text.replace("{{min_dep}}", str(cfg.min_deposit))
        finally:
            db.close()
        if img:
            await cb.message.answer_photo(img, caption=f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ({lang} / {key})</b>\n{text}")
        else:
            await cb.message.answer(f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ({lang} / {key})</b>\n{text}")
        await cb.answer()

    # ---- Admin: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    @r.callback_query(F.data == "adm:param:toggle_dep")
    async def param_toggle_dep(cb: CallbackQuery):
        if cb.from_user.id != tenant.owner_tg_id:
            await cb.answer()
            return
        db = SessionLocal()
        try:
            cfg = get_cfg(db, tenant.id)
            cfg.require_deposit = not cfg.require_deposit
            db.commit()
            await cb.message.edit_text("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_params(cfg))
            await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        finally:
            db.close()

    @r.callback_query(F.data == "adm:param:toggle_sub")
    async def param_toggle_sub(cb: CallbackQuery):
        if cb.from_user.id != tenant.owner_tg_id:
            await cb.answer()
            return
        db = SessionLocal()
        try:
            cfg = get_cfg(db, tenant.id)
            cfg.require_subscription = not bool(getattr(cfg, "require_subscription", False))
            db.commit()
            await cb.message.edit_text("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_params(cfg))
            await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        finally:
            db.close()

    @r.callback_query(F.data == "adm:param:set_min")
    async def param_set_min(cb: CallbackQuery, state: FSMContext):
        if cb.from_user.id != tenant.owner_tg_id:
            await cb.answer()
            return
        await state.set_state(AdminForm.params_wait_min_dep)
        await cb.message.edit_text("–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ $ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await cb.answer()

    @r.message(AdminForm.params_wait_min_dep)
    async def param_set_min_value(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        try:
            val = int((msg.text or "").strip())
            if val < 1:
                raise ValueError
        except Exception:
            await msg.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 1. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        db = SessionLocal()
        try:
            cfg = get_cfg(db, tenant.id)
            cfg.min_deposit = val
            db.commit()
        finally:
            db.close()
        await state.clear()
        await msg.answer("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=kb_admin_main())

    @r.callback_query(F.data == "adm:param:stock_miniapp")
    async def param_stock_miniapp(cb: CallbackQuery):
        if cb.from_user.id != tenant.owner_tg_id:
            await cb.answer()
            return
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tenant.id).first()
            t.miniapp_url = None
            db.commit()
        finally:
            db.close()
        await cb.message.edit_text("‚úÖ –í–µ—Ä–Ω—É–ª —Å—Ç–æ–∫–æ–≤—É—é –º–∏–Ω–∏-–∞–ø–ø (–∏–∑ ENV).", reply_markup=kb_admin_main())
        await cb.answer()

    # ---- Admin: –†–∞—Å—Å—ã–ª–∫–∞
    @r.callback_query(lambda c: c.data and c.data.startswith("adm:bs:"))
    async def bcast_choose_segment(cb: CallbackQuery, state: FSMContext):
        seg = cb.data.split(":")[2]  # all/registered/deposited
        await state.update_data(bcast_segment=seg)
        await state.set_state(AdminForm.bcast_wait_content)
        await cb.message.edit_text(f"–°–µ–≥–º–µ–Ω—Ç: <b>{seg}</b>\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ).")
        await cb.answer()

    @r.message(AdminForm.bcast_wait_content)
    async def bcast_collect(msg: Message, state: FSMContext):
        if msg.from_user.id != tenant.owner_tg_id:
            return
        data = await state.get_data()
        seg = data["bcast_segment"]
        text = msg.caption if msg.photo else msg.text
        media_id = msg.photo[-1].file_id if msg.photo else None
        await state.update_data(bcast_text=text, bcast_media=media_id)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="adm:bc:run")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="adm:menu")],
            ]
        )
        if media_id:
            await msg.answer_photo(media_id, caption="<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n" + (text or ""), reply_markup=kb)
        else:
            await msg.answer("<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n" + (text or ""), reply_markup=kb)
        await state.set_state(AdminForm.bcast_confirm)

    async def _run_broadcast(seg: str, text: str, media_id: Optional[str]):
        db = SessionLocal()
        try:
            q = db.query(User).filter(User.tenant_id == tenant.id)
            if seg == "registered":
                q = q.filter(User.step >= UserStep.registered)
            elif seg == "deposited":
                q = q.filter(User.step == UserStep.deposited)
            users = [u.tg_user_id for u in q.all() if u.tg_user_id]
        finally:
            db.close()

        rate = max(1, settings.broadcast_rate_per_hour)
        interval = max(90, int(3600 / rate))

        sent = 0
        failed = 0
        for uid in users:
            try:
                if media_id:
                    await bot.send_photo(uid, media_id, caption=text or "")
                else:
                    await bot.send_message(uid, text or "")
                sent += 1
            except Exception:
                failed += 1
            await asyncio.sleep(interval)

        try:
            await bot.send_message(tenant.owner_tg_id, f"üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}.")
        except Exception:
            pass

    @r.callback_query(F.data == "adm:bc:run")
    async def bcast_run(cb: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        seg = data.get("bcast_segment", "all")
        text = data.get("bcast_text") or ""
        media_id = data.get("bcast_media")
        await cb.message.edit_text(
            "üì£ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–æ (‚â§ 40/—á–∞—Å).", reply_markup=kb_admin_main()
        )
        await state.clear()
        asyncio.create_task(_run_broadcast(seg, text, media_id))
        await cb.answer()

    # ---- –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–µ–ø–æ–∑–∏—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    @r.callback_query(F.data == "prog:dep")
    async def refresh_progress(cb: CallbackQuery):
        db = SessionLocal()
        try:
            user = db.query(User).filter(
                User.tenant_id == tenant.id,
                User.tg_user_id == cb.from_user.id
            ).first()
            if not user:
                await cb.answer()
                return

            locale = user.lang or tenant.lang_default or "ru"
            cfg = get_cfg(db, tenant.id)

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if cfg.require_subscription:
                ok = await is_user_subscribed(bot, tenant.channel_url or "", user.tg_user_id)
                if not ok:
                    await render_subscribe(bot, tenant, user)
                    await cb.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å" if locale == "ru" else "Please subscribe first")
                    return

            # –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
            if user.step == UserStep.deposited:
                await render_main(bot, tenant, user)
                await cb.answer("–î–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç ‚úÖ" if locale == "ru" else "Access already unlocked ‚úÖ")
                return

            dep_total = get_deposit_total(db, tenant.id, user)
            left = max(0, cfg.min_deposit - dep_total)

            # VIP —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ä–æ–≥—É
            try:
                if dep_total >= int(cfg.vip_threshold or 500) and not getattr(user, "vip_notified", False):
                    msg_txt = (
                        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–µ–º–∏—É–º-–±–æ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                        if locale == "ru" else
                        "üéâ Congrats! You‚Äôre eligible for the premium bot. Please contact support to get access."
                    )
                    await bot.send_message(user.tg_user_id, msg_txt)
                    user.vip_notified = True
            except Exception as e:
                print(f"[vip-notify] {e}")

            text, img = tget(db, tenant.id, "step2", locale, default_text("step2", locale))
            text = text.replace("{{min_dep}}", str(cfg.min_deposit))
            text += (
                f"\n\nüíµ –í–Ω–µ—Å–µ–Ω–æ: ${dep_total} / ${cfg.min_deposit} (–æ—Å—Ç–∞–ª–æ—Å—å ${left})"
                if locale == "ru"
                else f"\n\nüíµ Paid: ${dep_total} / ${cfg.min_deposit} (left ${left})"
            )

            url = f"{settings.service_host}/r/dep?tenant_id={tenant.id}&uid={user.tg_user_id}"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç" if locale == "ru" else "üí≥ Deposit", url=url)],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if locale == "ru" else "üè† Main menu",
                                          callback_data="menu:main")],
                ]
            )

            is_media = bool(cb.message.photo or cb.message.document or cb.message.video or cb.message.animation)
            try:
                if is_media:
                    await cb.message.edit_caption(text, reply_markup=kb)
                else:
                    await cb.message.edit_text(text, reply_markup=kb)
            except TelegramBadRequest as e:
                msg = (str(e) or "").lower()
                if "message is not modified" in msg:
                    await cb.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" if locale == "ru" else "No changes")
                    return
                await cb.message.answer(text, reply_markup=kb)
                await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ" if locale == "ru" else "Updated")
                return

            await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ" if locale == "ru" else "Updated")
            db.commit()
        finally:
            db.close()

    # === –í–ê–ñ–ù–û: –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –û–î–ò–ù –†–ê–ó, –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ run_child_bot ===
    dp.include_router(r)

    try:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–∏–º–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –ø–æ–ª–ª–∏–Ω–≥–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        try:
            await bot.delete_webhook(drop_pending_updates=True)
        except Exception:
            pass
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        pass
    finally:
        await bot.session.close()
