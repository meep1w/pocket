# app/bots/parent/handlers/ga.py

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.exceptions import TelegramBadRequest

from app.settings import settings
from app.db import SessionLocal
from app.models import (
    Tenant, TenantStatus, User, UserStep,
    TenantText, TenantConfig, Postback
)

router = Router()


def _is_ga(uid: int) -> bool:
    return uid in settings.ga_admin_ids


def _safe_edit_text(message, text: str, reply_markup=None):
    async def _do():
        try:
            await message.edit_text(text, reply_markup=reply_markup)
        except TelegramBadRequest as e:
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º "message is not modified"
            if "message is not modified" not in str(e).lower():
                raise
    return _do()


def t_line(db, t: Tenant) -> str:
    total = db.query(User).filter(User.tenant_id == t.id).count()
    reg = db.query(User).filter(
        User.tenant_id == t.id,
        User.step >= UserStep.registered
    ).count()
    dep = db.query(User).filter(
        User.tenant_id == t.id,
        User.step == UserStep.deposited
    ).count()
    return f"#{t.id} {t.child_bot_username} ‚Äî <b>{t.status}</b> | üë• {total} / üìù {reg} / üí∞ {dep}"


@router.message(Command("ga"))
async def ga_menu(msg: Message):
    if not _is_ga(msg.from_user.id):
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="ga:list:1")],
        [InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ga:agg")],
    ])
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)


@router.callback_query(lambda c: c.data and c.data.startswith("ga:list:"))
async def ga_list(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    page = int(cb.data.split(":")[2])
    per = 10
    db = SessionLocal()
    try:
        q = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted)
        total = q.count()
        tenants = (
            q.order_by(Tenant.id.desc())
             .offset((page - 1) * per)
             .limit(per)
             .all()
        )

        if not tenants:
            await _safe_edit_text(
                cb.message,
                "–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ga:menu")]
                ])
            )
            await cb.answer()
            return

        lines = [t_line(db, t) for t in tenants]
        rows = []
        for t in tenants:
            rows.append([
                InlineKeyboardButton(
                    text=("‚è∏ –ü–∞—É–∑–∞" if t.status == TenantStatus.active else "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫"),
                    callback_data=f"ga:toggle:{t.id}"
                ),
                InlineKeyboardButton(text="‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏", callback_data=f"ga:show:{t.id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}"),
            ])

        nav = []
        if page > 1:
            nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"ga:list:{page - 1}"))
        if page * per < total:
            nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"ga:list:{page + 1}"))
        if nav:
            rows.append(nav)

        await _safe_edit_text(
            cb.message,
            "–ö–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join(lines),
            InlineKeyboardMarkup(inline_keyboard=rows)
        )
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data == "ga:agg")
async def ga_agg(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    db = SessionLocal()
    try:
        tenants = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted).all()
        tenant_ids = [t.id for t in tenants]

        tenants_total = len(tenants)
        tenants_active = sum(1 for t in tenants if t.status == TenantStatus.active)
        tenants_paused = sum(1 for t in tenants if t.status == TenantStatus.paused)

        users_total = db.query(User).filter(User.tenant_id.in_(tenant_ids)).count() if tenant_ids else 0
        users_reg = db.query(User).filter(
            User.tenant_id.in_(tenant_ids),
            User.step >= UserStep.registered
        ).count() if tenant_ids else 0
        users_dep = db.query(User).filter(
            User.tenant_id.in_(tenant_ids),
            User.step == UserStep.deposited
        ).count() if tenant_ids else 0

        text = (
            "<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–ö–ª–∏–µ–Ω—Ç—ã: {tenants_total} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {tenants_active}, –Ω–∞ –ø–∞—É–∑–µ: {tenants_paused})\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_total}\n"
            f"‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {users_reg}\n"
            f"‚Äî —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: {users_dep}"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ga:agg")],
        ])
        await _safe_edit_text(cb.message, text, kb)
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:toggle:"))
async def ga_toggle(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        t.status = TenantStatus.paused if t.status == TenantStatus.active else TenantStatus.active
        db.commit()

        # child-runner –¥–æ–ª–∂–µ–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å—Ç–∞—Ç—É—Å –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å/–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ —Å–∞–º
        await cb.answer("–ì–æ—Ç–æ–≤–æ")
        # –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await ga_list(cb)
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:show:"))
async def ga_show(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
            return

        line = t_line(db, t)
        txt = (
            f"{line}\n"
            f"–í–ª–∞–¥–µ–ª–µ—Ü: <code>{t.owner_tg_id}</code>\n"
            f"Support: {t.support_url or '‚Äî'}\n"
            f"Ref: {t.ref_link or '‚Äî'}\n"
            f"MiniApp: {t.miniapp_url or settings.miniapp_url or '‚Äî'}\n"
            f"Deposit URL: {t.deposit_link or '‚Äî'}"
        )
        rows = [
            [InlineKeyboardButton(text="üîÅ –ü–æ—Å—Ç–±—ç–∫–∏", callback_data=f"ga:pb:{t.id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
        ]
        await _safe_edit_text(cb.message, txt, InlineKeyboardMarkup(inline_keyboard=rows))
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:pb:"))
async def ga_pb(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
            return

        secret = t.postback_secret or settings.global_postback_secret
        base = settings.service_host.rstrip("/")
        reg = f"{base}/pb?tenant_id={t.id}&event=registration&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}"
        dep = f"{base}/pb?tenant_id={t.id}&event=deposit&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}&sum={{sumdep}}"

        txt = (
            f"–ü–æ—Å—Ç–±—ç–∫–∏ –¥–ª—è {t.child_bot_username}\n\n"
            f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n<code>{reg}</code>\n\n"
            f"üí≥ –î–µ–ø–æ–∑–∏—Ç:\n<code>{dep}</code>\n\n"
            "–ú–∞–∫—Ä–æ—Å—ã –≤ PocketPartners (–≤–ø–∏—Å–∞—Ç—å 1-–≤-1):\n"
            "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: click_id‚Üí<code>click_id</code>, trader_id‚Üí<code>trader_id</code>\n"
            "‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: click_id‚Üí<code>click_id</code>, trader_id‚Üí<code>trader_id</code>, sumdep‚Üí<code>sum</code>"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ga:show:{t.id}")]
        ])
        await _safe_edit_text(cb.message, txt, kb)
        await cb.answer()
    finally:
        db.close()


# -------- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º) --------

@router.callback_query(lambda c: c.data and c.data.startswith("ga:del:"))
async def ga_del(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = (
            f"–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ #{t.id} {t.child_bot_username}?\n\n"
            "–≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç:\n"
            "‚Ä¢ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞;\n"
            "‚Ä¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Å—Ç–±–µ–∫–∏, –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ–Ω—Ñ–∏–≥.\n\n"
            "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"ga:delconfirm:{t.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"ga:show:{t.id}")],
        ])
        await _safe_edit_text(cb.message, text, kb)
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:delconfirm:"))
async def ga_del_confirm(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        # —Å–æ–±–µ—Ä—ë–º –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å tenant_id
        users = db.query(User).filter(User.tenant_id == tid).all()
        for u in users:
            db.delete(u)

        pbs = db.query(Postback).filter(Postback.tenant_id == tid).all()
        for p in pbs:
            db.delete(p)

        texts = db.query(TenantText).filter(TenantText.tenant_id == tid).all()
        for tt in texts:
            db.delete(tt)

        cfg = db.query(TenantConfig).filter(TenantConfig.tenant_id == tid).first()
        if cfg:
            db.delete(cfg)

        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if t:
            db.delete(t)

        db.commit()

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ (–∏ –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")]
        ])
        await _safe_edit_text(cb.message, f"–ö–ª–∏–µ–Ω—Ç #{tid} —É–¥–∞–ª—ë–Ω ‚úÖ", kb)
        await cb.answer("–£–¥–∞–ª–µ–Ω–æ")
    finally:
        db.close()
