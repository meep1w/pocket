from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from sqlalchemy import and_

from app.settings import settings
from app.db import SessionLocal
from app.models import (
    Tenant, TenantStatus,
    User, UserStep,
    TenantText, TenantConfig, Postback,
)

router = Router()


def _is_ga(uid: int) -> bool:
    return uid in settings.ga_admin_ids


def _ga_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="ga:list:1")],
        [InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ga:agg")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞ –ë–î", callback_data="ga:clean:1")],
    ])


def _safe_edit(cb: CallbackQuery, text: str, kb: InlineKeyboardMarkup | None = None):
    # —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ "message is not modified"
    async def _do():
        try:
            await cb.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)
        except Exception:
            try:
                await cb.message.edit_reply_markup(reply_markup=kb)
            except Exception:
                pass
    return _do()


def t_line(db, t: Tenant):
    total = db.query(User).filter(User.tenant_id == t.id).count()
    reg = db.query(User).filter(
        and_(User.tenant_id == t.id, User.step >= UserStep.registered)
    ).count()
    dep = db.query(User).filter(
        and_(User.tenant_id == t.id, User.step == UserStep.deposited)
    ).count()
    return f"#{t.id} {t.child_bot_username} ‚Äî <b>{t.status}</b> | üë• {total} / üìù {reg} / üí∞ {dep}"


# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é GA =====
@router.message(Command("ga"))
async def ga_menu(msg: Message):
    if not _is_ga(msg.from_user.id):
        return
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=_ga_menu_kb())


@router.callback_query(F.data == "ga:home")
async def ga_home(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return
    await _safe_edit(cb, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", _ga_menu_kb())
    await cb.answer()


# ===== –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ =====
@router.callback_query(F.data.startswith("ga:list:"))
async def ga_list(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return
    page = int(cb.data.split(":")[2])
    per = 10
    db = SessionLocal()
    try:
        q = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted)
        total = q.count()
        tenants = q.order_by(Tenant.id.desc()).offset((page-1)*per).limit(per).all()
        if not tenants:
            await _safe_edit(cb, "–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", _ga_menu_kb())
            await cb.answer(); return

        lines = [t_line(db, t) for t in tenants]

        rows = []
        for t in tenants:
            rows.append([
                InlineKeyboardButton(
                    text=("‚è∏ –ü–∞—É–∑–∞" if t.status == TenantStatus.active else "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫"),
                    callback_data=f"ga:toggle:{t.id}"
                ),
                InlineKeyboardButton(text="‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏", callback_data=f"ga:show:{t.id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}"),
            ])

        nav = []
        if page > 1:
            nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"ga:list:{page-1}"))
        if page*per < total:
            nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"ga:list:{page+1}"))
        if nav:
            rows.append(nav)
        rows.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")])

        await _safe_edit(cb, "–ö–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join(lines),
                         InlineKeyboardMarkup(inline_keyboard=rows))
        await cb.answer()
    finally:
        db.close()


# ===== –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
@router.callback_query(F.data == "ga:agg")
async def ga_agg(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    db = SessionLocal()
    try:
        tenants = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted).all()
        ids = [t.id for t in tenants]

        tenants_total = len(tenants)
        tenants_active = sum(1 for t in tenants if t.status == TenantStatus.active)
        tenants_paused = sum(1 for t in tenants if t.status == TenantStatus.paused)

        users_total = db.query(User).filter(User.tenant_id.in_(ids)).count() if ids else 0
        users_reg = db.query(User).filter(
            and_(User.tenant_id.in_(ids), User.step >= UserStep.registered)
        ).count() if ids else 0
        users_dep = db.query(User).filter(
            and_(User.tenant_id.in_(ids), User.step == UserStep.deposited)
        ).count() if ids else 0

        text = (
            "<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–ö–ª–∏–µ–Ω—Ç—ã: {tenants_total} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {tenants_active}, –Ω–∞ –ø–∞—É–∑–µ: {tenants_paused})\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_total}\n"
            f"‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {users_reg}\n"
            f"‚Äî —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: {users_dep}"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ga:agg")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")],
        ])
        await _safe_edit(cb, text, kb)
        await cb.answer()
    finally:
        db.close()


# ===== –¢–æ–≥–≥–ª —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ =====
@router.callback_query(F.data.startswith("ga:toggle:"))
async def ga_toggle(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return
    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return
        t.status = TenantStatus.paused if t.status == TenantStatus.active else TenantStatus.active
        db.commit()
        await cb.answer("–û–∫")
        await ga_list(cb)
    finally:
        db.close()


# ===== –î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ =====
@router.callback_query(F.data.startswith("ga:show:"))
async def ga_show(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return
    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        line = t_line(db, t)
        txt = (
            f"{line}\n"
            f"–í–ª–∞–¥–µ–ª–µ—Ü: <code>{t.owner_tg_id}</code>\n"
            f"Support: {t.support_url}\n"
            f"Ref: {t.ref_link}\n"
            f"Deposit: {t.deposit_link or '‚Äî'}"
        )
        rows = [
            [InlineKeyboardButton(text="üîÅ –ü–æ—Å—Ç–±—ç–∫–∏", callback_data=f"ga:pb:{t.id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")],
        ]
        await _safe_edit(cb, txt, InlineKeyboardMarkup(inline_keyboard=rows))
        await cb.answer()
    finally:
        db.close()


# ===== –ü–æ—Å—Ç–±—ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ =====
@router.callback_query(F.data.startswith("ga:pb:"))
async def ga_pb(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return
    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        secret = t.postback_secret or settings.global_postback_secret
        base = settings.service_host.rstrip("/")
        reg = f"{base}/pb?tenant_id={t.id}&event=registration&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}"
        dep = f"{base}/pb?tenant_id={t.id}&event=deposit&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}&sum={{sumdep}}"

        txt = (
            f"–ü–æ—Å—Ç–±—ç–∫–∏ –¥–ª—è {t.child_bot_username}\n\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n<code>{reg}</code>\n"
            f"–î–µ–ø–æ–∑–∏—Ç:\n<code>{dep}</code>\n\n"
            "PP –º–∞–∫—Ä–æ—Å—ã:\n"
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: click_id‚Üíclick_id, trader_id‚Üítrader_id\n"
            "–î–µ–ø–æ–∑–∏—Ç: click_id‚Üíclick_id, trader_id‚Üítrader_id, sumdep‚Üísum"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ga:show:{t.id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")],
        ])
        await _safe_edit(cb, txt, kb)
        await cb.answer()
    finally:
        db.close()


# ===== –£–î–ê–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê (–ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞, –ø–æ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏–µ Tenant) =====
@router.callback_query(F.data.startswith("ga:del:"))
async def ga_del(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return
    tid = int(cb.data.split(":")[2])

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"ga:delc:{tid}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"ga:show:{tid}")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")],
    ])
    await _safe_edit(cb, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å</b> –∫–ª–∏–µ–Ω—Ç–∞ #{tid}?\n"
                         f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ—Å—Ç–±—ç–∫–∏, –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∫–æ–Ω—Ñ–∏–≥–∏. –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", kb)
    await cb.answer()


@router.callback_query(F.data.startswith("ga:delc:"))
async def ga_delc(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await _safe_edit(cb, "–ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", _ga_menu_kb()); await cb.answer(); return

        # 1) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ ‚Äî —Å—Ç–∞–≤–∏–º paused
        if t.status == TenantStatus.active:
            t.status = TenantStatus.paused
            db.commit()

        # 2) –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–µ—Ç–∏ ‚Üí —Ä–æ–¥–∏—Ç–µ–ª—å)
        db.query(Postback).filter(Postback.tenant_id == t.id).delete(synchronize_session=False)
        db.query(User).filter(User.tenant_id == t.id).delete(synchronize_session=False)
        db.query(TenantText).filter(TenantText.tenant_id == t.id).delete(synchronize_session=False)
        db.query(TenantConfig).filter(TenantConfig.tenant_id == t.id).delete(synchronize_session=False)
        db.commit()

        # 3) –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞
        db.delete(t)
        db.commit()

        await _safe_edit(cb, f"‚úÖ –ö–ª–∏–µ–Ω—Ç #{tid} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω (–≤–∫–ª—é—á–∞—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ).", _ga_menu_kb())
        await cb.answer("–£–¥–∞–ª–µ–Ω–æ")
        return

    except Exception as e:
        db.rollback()
        # –§–æ–ª–±—ç–∫: –ø–æ–º–µ—Ç–∏–º –∫–∞–∫ deleted, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–ª–æ
        try:
            t = db.query(Tenant).filter(Tenant.id == tid).first()
            if t:
                t.status = TenantStatus.deleted
                db.commit()
        except Exception:
            db.rollback()
        await _safe_edit(cb, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å. –ö–ª–∏–µ–Ω—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ deleted.\n–û—à–∏–±–∫–∞: <code>{e}</code>",
                         _ga_menu_kb())
        await cb.answer("–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ deleted")
    finally:
        db.close()


# ===== –û–ß–ò–°–¢–ö–ê –ë–î –ö–õ–ò–ï–ù–¢–ê (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞) =====
# –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
@router.callback_query(F.data.startswith("ga:clean:"))
async def ga_clean_router(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    parts = cb.data.split(":")
    # ga:clean:1  |  ga:clean:pick:{id}  |  ga:clean:confirm:{id}  |  ga:clean:run:{id}
    if len(parts) == 3 and parts[2].isdigit():
        # —Å–ø–∏—Å–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        page = int(parts[2])
        per = 10
        db = SessionLocal()
        try:
            q = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted)
            total = q.count()
            tenants = q.order_by(Tenant.id.desc()).offset((page-1)*per).limit(per).all()
            if not tenants:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")]
                ])
                await _safe_edit(cb, "–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", kb)
                await cb.answer(); return

            lines = [t_line(db, t) for t in tenants]
            rows = []
            for t in tenants:
                rows.append([
                    InlineKeyboardButton(text="üßπ –í—ã–±—Ä–∞—Ç—å", callback_data=f"ga:clean:pick:{t.id}"),
                    InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"ga:show:{t.id}"),
                ])
            nav = []
            if page > 1:
                nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"ga:clean:{page-1}"))
            if page*per < total:
                nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"ga:clean:{page+1}"))
            if nav:
                rows.append(nav)
            rows.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")])

            await _safe_edit(cb, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ë–î:\n" + "\n".join(lines),
                             InlineKeyboardMarkup(inline_keyboard=rows))
            await cb.answer()
        finally:
            db.close()
        return

    if len(parts) == 3 and parts[2].startswith("pick"):
        tid = int(parts[2].split("pick")[1].strip(":") or parts[2].split(":")[1])
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tid).first()
            if not t:
                await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return
            txt = (
                f"{t_line(db, t)}\n\n"
                "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è <b>–æ—á–∏—Å—Ç–∏—Ç –ë–î –±–æ—Ç–∞</b> (—É–¥–∞–ª–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç–±—ç–∫–∏).\n"
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏, —Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏."
            )
        finally:
            db.close()
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ë–î –±–æ—Ç–∞", callback_data=f"ga:clean:confirm:{tid}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:clean:1")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")],
        ])
        await _safe_edit(cb, txt, kb)
        await cb.answer()
        return

    if len(parts) == 3 and parts[2].startswith("confirm"):
        tid = int(parts[2].split(":")[1])
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É", callback_data=f"ga:clean:run:{tid}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"ga:clean:pick:{tid}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")],
        ])
        await _safe_edit(cb,
                         f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ë–î –∫–ª–∏–µ–Ω—Ç–∞ #{tid}?\n"
                         f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ—Å—Ç–±—ç–∫–∏.", kb)
        await cb.answer()
        return

    if len(parts) == 3 and parts[2].startswith("run"):
        tid = int(parts[2].split(":")[1])
        db = SessionLocal()
        try:
            t = db.query(Tenant).filter(Tenant.id == tid).first()
            if not t:
                await _safe_edit(cb, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", _ga_menu_kb()); await cb.answer(); return

            # –î–æ–∑–≤–æ–ª–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ; –ø—Ä–æ—Å—Ç–æ —á–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ
            db.query(Postback).filter(Postback.tenant_id == tid).delete(synchronize_session=False)
            db.query(User).filter(User.tenant_id == tid).delete(synchronize_session=False)
            db.commit()

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∫–ª–∏–µ–Ω—Ç–∞", callback_data="ga:clean:1")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ga:home")],
            ])
            await _safe_edit(cb, f"‚úÖ –ë–î –∫–ª–∏–µ–Ω—Ç–∞ #{tid} –æ—á–∏—â–µ–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ—Å—Ç–±—ç–∫–∏).", kb)
            await cb.answer("–ì–æ—Ç–æ–≤–æ")
        except Exception as e:
            db.rollback()
            await _safe_edit(cb, f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: <code>{e}</code>", _ga_menu_kb())
            await cb.answer("–û—à–∏–±–∫–∞")
        finally:
            db.close()
        return

    # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–º–æ–π
    await ga_home(cb)
