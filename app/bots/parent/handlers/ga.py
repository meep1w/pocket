# app/bots/parent/handlers/ga.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.settings import settings
from app.db import SessionLocal
from app.models import Tenant, TenantStatus, User, UserStep

router = Router()


def _is_ga(uid: int) -> bool:
    return uid in settings.ga_admin_ids


def _t_line(db, t: Tenant) -> str:
    total = db.query(User).filter(User.tenant_id == t.id).count()
    reg = db.query(User).filter(User.tenant_id == t.id, User.step >= UserStep.registered).count()
    dep = db.query(User).filter(User.tenant_id == t.id, User.step == UserStep.deposited).count()
    return f"#{t.id} {t.child_bot_username} ‚Äî <b>{t.status}</b> | üë• {total} / üìù {reg} / üí∞ {dep}"


@router.message(Command("ga"))
async def ga_menu(msg: Message):
    if not _is_ga(msg.from_user.id):
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="ga:list:1")],
        [InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ga:agg")],
    ])
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)


@router.callback_query(lambda c: c.data and c.data.startswith("ga:list:"))
async def ga_list(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    page = int(cb.data.split(":")[2])
    per = 10
    db = SessionLocal()
    try:
        q = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted)
        total = q.count()
        tenants = q.order_by(Tenant.id.desc()).offset((page - 1) * per).limit(per).all()

        if not tenants:
            try:
                await cb.message.edit_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            except Exception:
                pass
            await cb.answer()
            return

        lines = [_t_line(db, t) for t in tenants]
        rows = []
        for t in tenants:
            rows.append([
                InlineKeyboardButton(
                    text=("‚è∏ –ü–∞—É–∑–∞" if t.status == TenantStatus.active else "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫"),
                    callback_data=f"ga:toggle:{t.id}"
                ),
                InlineKeyboardButton(text="‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏", callback_data=f"ga:show:{t.id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}"),
            ])

        nav = []
        if page > 1:
            nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"ga:list:{page - 1}"))
        if page * per < total:
            nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"ga:list:{page + 1}"))
        if nav:
            rows.append(nav)

        try:
            await cb.message.edit_text("–ö–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join(lines),
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
        except Exception:
            pass
        await cb.answer()
    finally:
        db.close()


@router.callback_query(F.data == "ga:agg")
async def ga_agg(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    db = SessionLocal()
    try:
        tenants = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted).all()
        tenant_ids = [t.id for t in tenants]

        tenants_total = len(tenants)
        tenants_active = sum(1 for t in tenants if t.status == TenantStatus.active)
        tenants_paused = sum(1 for t in tenants if t.status == TenantStatus.paused)

        users_total = db.query(User).filter(User.tenant_id.in_(tenant_ids)).count() if tenant_ids else 0
        users_reg = db.query(User).filter(
            User.tenant_id.in_(tenant_ids),
            User.step >= UserStep.registered
        ).count() if tenant_ids else 0
        users_dep = db.query(User).filter(
            User.tenant_id.in_(tenant_ids),
            User.step == UserStep.deposited
        ).count() if tenant_ids else 0

        text = (
            "<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–ö–ª–∏–µ–Ω—Ç—ã: {tenants_total} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {tenants_active}, –Ω–∞ –ø–∞—É–∑–µ: {tenants_paused})\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_total}\n"
            f"‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {users_reg}\n"
            f"‚Äî —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: {users_dep}"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ga:agg")],
        ])
        try:
            await cb.message.edit_text(text, reply_markup=kb)
        except Exception:
            pass
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:toggle:"))
async def ga_toggle(cb: CallbackQuery):
    if cb.from_user.id not in settings.ga_admin_ids:
        await cb.answer(); return
    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω");
            return
        t.status = TenantStatus.paused if t.status == TenantStatus.active else TenantStatus.active
        db.commit()
        await cb.answer("–û–∫")
        # –ø–µ—Ä–µ—Ä–∏—Å—É–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å/–∫–Ω–æ–ø–∫–∏
        await ga_list(cb)
    finally:
        db.close()



@router.callback_query(lambda c: c.data and c.data.startswith("ga:show:"))
async def ga_show(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
            return

        line = _t_line(db, t)
        txt = (f"{line}\n"
               f"–í–ª–∞–¥–µ–ª–µ—Ü: <code>{t.owner_tg_id}</code>\n"
               f"Support: {t.support_url or '‚Äî'}\n"
               f"Ref: {t.ref_link or '‚Äî'}")

        rows = [
            [InlineKeyboardButton(text="üîÅ –ü–æ—Å—Ç–±—ç–∫–∏", callback_data=f"ga:pb:{t.id}")],
            [InlineKeyboardButton(
                text=("‚è∏ –ü–∞—É–∑–∞" if t.status == TenantStatus.active else "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫"),
                callback_data=f"ga:toggle:{t.id}"
            )],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
        ]
        try:
            await cb.message.edit_text(txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
        except Exception:
            pass
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:pb:"))
async def ga_pb(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
            return

        secret = t.postback_secret or settings.global_postback_secret
        base = settings.service_host

        reg = f"{base}/pb?tenant_id={t.id}&event=registration&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}"
        dep = f"{base}/pb?tenant_id={t.id}&event=deposit&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}&sum={{sumdep}}"

        txt = (
            f"–ü–æ—Å—Ç–±—ç–∫–∏ –¥–ª—è {t.child_bot_username}\n\n"
            f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n<code>{reg}</code>\n"
            f"üí≥ –î–µ–ø–æ–∑–∏—Ç:\n<code>{dep}</code>\n\n"
            "PP –º–∞–∫—Ä–æ—Å—ã (–≤–ø–∏—Å–∞—Ç—å 1-–≤-1):\n"
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: click_id‚Üíclick_id, trader_id‚Üítrader_id\n"
            "–î–µ–ø–æ–∑–∏—Ç: click_id‚Üíclick_id, trader_id‚Üítrader_id, sumdep‚Üísum"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ga:show:{t.id}")]
        ])
        try:
            await cb.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
        except Exception:
            pass
        await cb.answer()
    finally:
        db.close()


# ---------- –£–î–ê–õ–ï–ù–ò–ï –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú ----------

@router.callback_query(lambda c: c.data and c.data.startswith("ga:del:"))
async def ga_del(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer()
        return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        txt = (f"–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ <b>{t.child_bot_username}</b> (id={t.id})?\n\n"
               "‚ùóÔ∏è–ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <b>deleted</b>. –î–µ—Ç—Å–∫–∏–π –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å—Å—è, \n"
               "–∫–ª–∏–µ–Ω—Ç –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–æ–≤. –î–∞–Ω–Ω—ã–µ –≤ –ë–î –æ—Å—Ç–∞—é—Ç—Å—è (—Ç–æ–∫–µ–Ω/username –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∏–∑-–∑–∞ NOT NULL).")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"ga:del:confirm:{t.id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"ga:show:{t.id}")],
        ])
        try:
            await cb.message.edit_text(txt, reply_markup=kb)
        except Exception:
            pass
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:del:confirm:"))
async def ga_del_confirm(cb: CallbackQuery):
    if cb.from_user.id not in settings.ga_admin_ids:
        await cb.answer(); return
    tid = int(cb.data.split(":")[2])

    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω");
            return

        # —Å—Ç–∞–≤–∏–º deleted, —Ç–æ–∫–µ–Ω—ã –ù–ï —Ç—Ä–æ–≥–∞–µ–º (–∏–Ω–∞—á–µ IntegrityError)
        t.status = TenantStatus.deleted
        db.commit()

        # –ø–æ –∂–µ–ª–∞–Ω–∏—é: –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        db.execute("DELETE FROM users WHERE tenant_id=:tid", {"tid": tid})
        db.execute("DELETE FROM tenant_texts WHERE tenant_id=:tid", {"tid": tid})
        db.execute("DELETE FROM tenant_configs WHERE tenant_id=:tid", {"tid": tid})
        db.execute("DELETE FROM postbacks WHERE tenant_id=:tid", {"tid": tid})
        db.commit()

        await cb.message.edit_text("üóë –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω. –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")
        await cb.answer("–ì–æ—Ç–æ–≤–æ")
    finally:
        db.close()

