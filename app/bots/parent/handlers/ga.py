from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from app.settings import settings
from app.db import SessionLocal
from app.models import Tenant, TenantStatus, User, UserStep, TenantText, TenantConfig, Postback

router = Router()

def _is_ga(uid: int) -> bool:
    return uid in settings.ga_admin_ids

def _safe_edit(cb: CallbackQuery, text: str, kb: InlineKeyboardMarkup | None = None):
    async def _do():
        if kb:
            await cb.message.edit_text(text, reply_markup=kb)
        else:
            await cb.message.edit_text(text)
    return _do()

def t_line(db, t: Tenant):
    total = db.query(User).filter(User.tenant_id == t.id).count()
    reg = db.query(User).filter(User.tenant_id == t.id, User.step >= UserStep.registered).count()
    dep = db.query(User).filter(User.tenant_id == t.id, User.step == UserStep.deposited).count()
    return f"#{t.id} {t.child_bot_username} ‚Äî <b>{t.status}</b> | üë• {total} / üìù {reg} / üí∞ {dep}"

@router.message(Command("ga"))
async def ga_menu(msg: Message):
    if not _is_ga(msg.from_user.id):
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="ga:list:1")],
        [InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ga:agg")],
    ])
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@router.callback_query(lambda c: c.data and c.data.startswith("ga:list:"))
async def ga_list(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    page = int(cb.data.split(":")[2])
    per = 10
    db = SessionLocal()
    try:
        q = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted)
        total = q.count()
        tenants = q.order_by(Tenant.id.desc()).offset((page - 1) * per).limit(per).all()
        if not tenants:
            try:
                await cb.message.edit_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            except TelegramBadRequest:
                pass
            await cb.answer(); return

        lines = [t_line(db, t) for t in tenants]

        rows = []
        for t in tenants:
            rows.append([
                InlineKeyboardButton(text=("‚è∏ –ü–∞—É–∑–∞" if t.status == TenantStatus.active else "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫"),
                                     callback_data=f"ga:toggle:{t.id}"),
                InlineKeyboardButton(text="‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏", callback_data=f"ga:show:{t.id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}"),
            ])

        nav = []
        if page > 1:
            nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"ga:list:{page-1}"))
        if page * per < total:
            nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"ga:list:{page+1}"))
        if nav:
            rows.append(nav)

        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        try:
            await cb.message.edit_text("–ö–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join(lines), reply_markup=kb)
        except TelegramBadRequest:
            pass
        await cb.answer()
    finally:
        db.close()

@router.callback_query(F.data == "ga:agg")
async def ga_agg(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    db = SessionLocal()
    try:
        tenants = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted).all()
        ids = [t.id for t in tenants]

        tenants_total = len(tenants)
        tenants_active = sum(1 for t in tenants if t.status == TenantStatus.active)
        tenants_paused = sum(1 for t in tenants if t.status == TenantStatus.paused)

        users_total = db.query(User).filter(User.tenant_id.in_(ids)).count() if ids else 0
        users_reg = db.query(User).filter(User.tenant_id.in_(ids), User.step >= UserStep.registered).count() if ids else 0
        users_dep = db.query(User).filter(User.tenant_id.in_(ids), User.step == UserStep.deposited).count() if ids else 0

        text = (
            "<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–ö–ª–∏–µ–Ω—Ç—ã: {tenants_total} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {tenants_active}, –Ω–∞ –ø–∞—É–∑–µ: {tenants_paused})\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_total}\n"
            f"‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {users_reg}\n"
            f"‚Äî —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: {users_dep}"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ga:agg")],
        ])
        try:
            await cb.message.edit_text(text, reply_markup=kb)
        except TelegramBadRequest:
            pass
        await cb.answer()
    finally:
        db.close()

@router.callback_query(lambda c: c.data and c.data.startswith("ga:toggle:"))
async def ga_toggle(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return
        t.status = TenantStatus.paused if t.status == TenantStatus.active else TenantStatus.active
        db.commit()
        await cb.answer("–û–∫")
    finally:
        db.close()
    # –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await ga_list(CallbackQuery.model_validate({**cb.model_dump(), "data": "ga:list:1"}))

@router.callback_query(lambda c: c.data and c.data.startswith("ga:show:"))
async def ga_show(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        line = t_line(db, t)
        txt = (f"{line}\n"
               f"–í–ª–∞–¥–µ–ª–µ—Ü: <code>{t.owner_tg_id}</code>\n"
               f"Support: {t.support_url or '‚Äî'}\nRef: {t.ref_link or '‚Äî'}\nWebApp: {t.miniapp_url or '‚Äî'}")
        rows = [
            [InlineKeyboardButton(text="üîÅ –ü–æ—Å—Ç–±—ç–∫–∏", callback_data=f"ga:pb:{t.id}")],
            [InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=f"ga:note:{t.id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
        ]
        try:
            await cb.message.edit_text(txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
        except TelegramBadRequest:
            pass
        await cb.answer()
    finally:
        db.close()

@router.callback_query(lambda c: c.data and c.data.startswith("ga:del:ok:"))
async def ga_delete_ok(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[3])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        # 1) –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ deleted (—á—Ç–æ–±—ã —Ä–∞–Ω–Ω–µ—Ä –¥–µ—Ç–µ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–≥–∞—Å–∏–ª –∑–∞–¥–∞—á—É)
        t.status = TenantStatus.deleted
        db.commit()

        # 2) –ß–∏—Å—Ç–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.query(User).filter(User.tenant_id == tid).delete(synchronize_session=False)
        db.query(TenantText).filter(TenantText.tenant_id == tid).delete(synchronize_session=False)
        db.query(TenantConfig).filter(TenantConfig.tenant_id == tid).delete(synchronize_session=False)
        db.query(Postback).filter(Postback.tenant_id == tid).delete(synchronize_session=False)
        db.commit()

        # –í–∞–∂–Ω–æ: —Å–∞–º Tenant –Ω–µ —É–¥–∞–ª—è–µ–º –∏–∑-–∑–∞ NOT NULL –Ω–∞ —Ç–æ–∫–µ–Ω/username; —Å—Ç–∞—Ç—É—Å=deleted —Å–∫—Ä—ã–≤–∞–µ—Ç –∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞.
        try:
            await cb.message.edit_text("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω. –û–Ω –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ —Å–∫—Ä—ã—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        except TelegramBadRequest:
            pass
        await cb.answer("–£–¥–∞–ª—ë–Ω")
    finally:
        db.close()

@router.callback_query(lambda c: c.data and c.data.startswith("ga:del:"))
async def ga_delete_confirm(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return
        text = (f"‚ùóÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ <b>{t.child_bot_username}</b> –Ω–∞–≤—Å–µ–≥–¥–∞?\n\n"
                f"–ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/—Ç–µ–∫—Å—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"ga:del:ok:{t.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"ga:show:{t.id}")],
        ])
        try:
            await cb.message.edit_text(text, reply_markup=kb)
        except TelegramBadRequest:
            pass
        await cb.answer()
    finally:
        db.close()

@router.callback_query(lambda c: c.data and c.data.startswith("ga:pb:"))
async def ga_pb(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        secret = t.postback_secret or settings.global_postback_secret
        base = settings.service_host.rstrip("/")
        reg = f"{base}/pb?tenant_id={t.id}&event=registration&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}"
        dep = f"{base}/pb?tenant_id={t.id}&event=deposit&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}&sum={{sumdep}}"

        txt = (f"–ü–æ—Å—Ç–±—ç–∫–∏ –¥–ª—è {t.child_bot_username}\n\n"
               f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n<code>{reg}</code>\n"
               f"–î–µ–ø–æ–∑–∏—Ç:\n<code>{dep}</code>\n\n"
               "PP –º–∞–∫—Ä–æ—Å—ã (–≤–ø–∏—Å–∞—Ç—å 1-–≤-1):\n"
               "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: click_id‚Üíclick_id, trader_id‚Üítrader_id\n"
               "–î–µ–ø–æ–∑–∏—Ç: click_id‚Üíclick_id, trader_id‚Üítrader_id, sumdep‚Üísum")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ga:show:{t.id}")]
        ])
        try:
            await cb.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
        except TelegramBadRequest:
            pass
        await cb.answer()
    finally:
        db.close()
