# app/bots/parent/handlers/ga.py
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.settings import settings
from app.db import SessionLocal
from app.models import Tenant, TenantStatus, User, UserStep

router = Router()


def _is_ga(uid: int) -> bool:
    return uid in settings.ga_admin_ids


def _tenant_line(db, t: Tenant) -> str:
    total = db.query(User).filter(User.tenant_id == t.id).count()
    reg = db.query(User).filter(User.tenant_id == t.id, User.step >= UserStep.registered).count()
    dep = db.query(User).filter(User.tenant_id == t.id, User.step == UserStep.deposited).count()
    return f"#{t.id} {t.child_bot_username or '‚Äî'} ‚Äî <b>{t.status}</b> | üë• {total} / üìù {reg} / üí∞ {dep}"


@router.message(Command("ga"))
async def ga_menu(msg: Message):
    if not _is_ga(msg.from_user.id):
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="ga:list:1")],
        [InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ga:agg")],
    ])
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)


@router.callback_query(lambda c: c.data and c.data.startswith("ga:list:"))
async def ga_list(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return
    page = int(cb.data.split(":")[2])
    per = 10

    db = SessionLocal()
    try:
        q = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted)
        total = q.count()
        tenants = q.order_by(Tenant.id.desc()).offset((page - 1) * per).limit(per).all()
        if not tenants:
            await cb.message.edit_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            await cb.answer(); return

        lines = [_tenant_line(db, t) for t in tenants]

        rows = []
        for t in tenants:
            rows.append([
                InlineKeyboardButton(
                    text=("‚è∏ –ü–∞—É–∑–∞" if t.status == TenantStatus.active else "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫"),
                    callback_data=f"ga:toggle:{t.id}"
                ),
                InlineKeyboardButton(text="‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏", callback_data=f"ga:show:{t.id}"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}"),
            ])

        nav = []
        if page > 1:
            nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"ga:list:{page - 1}"))
        if page * per < total:
            nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"ga:list:{page + 1}"))
        if nav:
            rows.append(nav)

        await cb.message.edit_text(
            "–ö–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join(lines),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=rows),
            disable_web_page_preview=True,
        )
        await cb.answer()
    finally:
        db.close()


@router.callback_query(F.data == "ga:agg")
async def ga_agg(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    db = SessionLocal()
    try:
        tenants = db.query(Tenant).filter(Tenant.status != TenantStatus.deleted).all()
        tenant_ids = [t.id for t in tenants]

        tenants_total = len(tenants)
        tenants_active = sum(1 for t in tenants if t.status == TenantStatus.active)
        tenants_paused = sum(1 for t in tenants if t.status == TenantStatus.paused)

        users_total = db.query(User).filter(User.tenant_id.in_(tenant_ids)).count() if tenant_ids else 0
        users_reg = db.query(User).filter(
            User.tenant_id.in_(tenant_ids),
            User.step >= UserStep.registered
        ).count() if tenant_ids else 0
        users_dep = db.query(User).filter(
            User.tenant_id.in_(tenant_ids),
            User.step == UserStep.deposited
        ).count() if tenant_ids else 0

        text = (
            "<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–ö–ª–∏–µ–Ω—Ç—ã: {tenants_total} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {tenants_active}, –Ω–∞ –ø–∞—É–∑–µ: {tenants_paused})\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_total}\n"
            f"‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {users_reg}\n"
            f"‚Äî —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: {users_dep}"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ga:agg")],
        ])
        await cb.message.edit_text(text, reply_markup=kb)
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:toggle:"))
async def ga_toggle(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        if t.status == TenantStatus.active:
            t.status = TenantStatus.paused
        elif t.status == TenantStatus.paused:
            t.status = TenantStatus.active
        else:
            # deleted ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            await cb.answer("–¢–µ–Ω–∞–Ω—Ç —É–¥–∞–ª—ë–Ω"); return

        db.commit()
        await cb.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        # –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ (–≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é)
        await ga_list(CallbackQuery(id=cb.id, from_user=cb.from_user, message=cb.message, data="ga:list:1"))
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:show:"))
async def ga_show(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        line = _tenant_line(db, t)
        txt = (
            f"{line}\n"
            f"–í–ª–∞–¥–µ–ª–µ—Ü: <code>{t.owner_tg_id}</code>\n"
            f"Support: {t.support_url or '‚Äî'}\n"
            f"Ref: {t.ref_link or '‚Äî'}\n"
            f"WebApp: {t.miniapp_url or '‚Äî'}\n"
        )
        rows = [
            [InlineKeyboardButton(text="üîÅ –ü–æ—Å—Ç–±—ç–∫–∏", callback_data=f"ga:pb:{t.id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:del:{t.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="ga:list:1")],
        ]
        await cb.message.edit_text(txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=rows), disable_web_page_preview=True)
        await cb.answer()
    finally:
        db.close()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:pb:"))
async def ga_pb(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        secret = t.postback_secret or settings.global_postback_secret
        base = settings.service_host

        reg = f"{base}/pb?tenant_id={t.id}&event=registration&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}"
        txt = (
            f"–ü–æ—Å—Ç–±—ç–∫–∏ –¥–ª—è {t.child_bot_username or '‚Äî'}\n\n"
            f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n<code>{reg}</code>\n"
            "–ú–∞–∫—Ä–æ—Å—ã –≤ Pocket Partners (1-–≤-1):\n"
            "‚Ä¢ click_id ‚Üí <code>click_id</code>\n"
            "‚Ä¢ trader_id ‚Üí <code>trader_id</code>\n\n"
        )

        # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–µ–ø–æ–∑–∏—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –¥–µ–ø–æ–∑–∏—Ç–∞
        # (–∏–ª–∏ –µ—Å–ª–∏ –≤ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ –¥–µ–ø–æ–∑–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å –±–ª–æ–∫ –≤—Å–µ–≥–¥–∞)
        dep = f"{base}/pb?tenant_id={t.id}&event=deposit&t={secret}&click_id={{click_id}}&trader_id={{trader_id}}&sum={{sumdep}}"
        txt += (
            "üí≥ –î–µ–ø–æ–∑–∏—Ç:\n"
            f"<code>{dep}</code>\n"
            "–ú–∞–∫—Ä–æ—Å—ã –≤ Pocket Partners (1-–≤-1):\n"
            "‚Ä¢ click_id ‚Üí <code>click_id</code>\n"
            "‚Ä¢ trader_id ‚Üí <code>trader_id</code>\n"
            "‚Ä¢ sumdep ‚Üí <code>sum</code>\n"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ga:show:{t.id}")],
        ])
        await cb.message.edit_text(txt, reply_markup=kb, disable_web_page_preview=True)
        await cb.answer()
    finally:
        db.close()


# ---------- –£–î–ê–õ–ï–ù–ò–ï (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º) ----------

@router.callback_query(lambda c: c.data and c.data.startswith("ga:del:"))
async def ga_delete_ask(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"ga:show:{tid}")],
        [InlineKeyboardButton(text="üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"ga:del:{tid}:yes")],
    ])
    await cb.message.edit_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=kb)
    await cb.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("ga:del:") and c.data.endswith(":yes"))
async def ga_delete_do(cb: CallbackQuery):
    if not _is_ga(cb.from_user.id):
        await cb.answer(); return

    tid = int(cb.data.split(":")[2])
    db = SessionLocal()
    try:
        t = db.query(Tenant).filter(Tenant.id == tid).first()
        if not t:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω"); return

        # –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: —á—Ç–æ–±—ã —Ä–∞–Ω–Ω–µ—Ä —Ç—É—Ç –∂–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–ª–ª–∏–Ω–≥
        t.status = TenantStatus.deleted
        t.child_bot_token = None
        t.child_bot_username = None
        db.commit()
    finally:
        db.close()

    await cb.message.edit_text("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω).")
    await cb.answer()
