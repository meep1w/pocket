import re
from secrets import token_urlsafe
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message
from app.settings import settings
from app.db import SessionLocal
from app.models import Tenant, TenantStatus

router = Router()

TOKEN_RE = re.compile(r"^\d+:[A-Za-z0-9_-]{20,}$")

async def is_member(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
    try:
        m = await bot.get_chat_member(settings.private_channel_id, user_id)
        return m.status not in ("left", "kicked")
    except Exception:
        return False


# === 1. /connect ===
@router.message(Command("connect"))
async def cmd_connect(msg: Message):
    db = SessionLocal()
    try:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞: —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É–∂–µ –µ—Å—Ç—å –±–æ—Ç?
        exists = db.query(Tenant).filter(
            Tenant.owner_tg_id == msg.from_user.id,
            Tenant.status.in_(["active", "paused"])
        ).first()
        if exists:
            await msg.answer(
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–µ–ª—å–∑—è –ø–æ–¥–∫–ª—é—á–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞.\n"
                f"–°–µ–π—á–∞—Å –ø—Ä–∏–≤—è–∑–∞–Ω: <b>{exists.child_bot_username or '–±–µ–∑ –∏–º–µ–Ω–∏'}</b>.\n\n"
                f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —É –ì–ê."
            )
            return
    finally:
        db.close()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ
    bot = msg.bot
    if not await is_member(bot, msg.from_user.id):
        await msg.answer("‚õîÔ∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    await msg.answer(
        "‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. "
        "–ü—Ä–∏—à–ª–∏—Ç–µ <b>API-—Ç–æ–∫–µ–Ω</b> –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç <code>123456:ABC...</code>)."
    )


# === 2. –ü—Ä–∏—ë–º —Ç–æ–∫–µ–Ω–∞ ===
@router.message(lambda m: bool(TOKEN_RE.match(m.text or "")))
async def got_token(msg: Message):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ
    bot = msg.bot
    if not await is_member(bot, msg.from_user.id):
        await msg.answer("‚õîÔ∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    token = (msg.text or "").strip()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —É Telegram
    try:
        test_bot = Bot(token=token)
        me = await test_bot.get_me()
        username = me.username
        if not username:
            raise ValueError("–£ –±–æ—Ç–∞ –Ω–µ—Ç username")
    except Exception:
        await msg.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    db = SessionLocal()
    try:
        t = Tenant(
            owner_tg_id=msg.from_user.id,
            child_bot_token=token,
            child_bot_username=f"@{username}",
            status=TenantStatus.active,
        )
        if settings.tenant_secret_mode == "enabled":
            t.postback_secret = token_urlsafe(24)

        db.add(t)
        db.commit()
    finally:
        db.close()

    await msg.answer(
        f"ü§ñ –ë–æ—Ç <b>@{username}</b> –ø–æ–¥–∫–ª—é—á—ë–Ω!\n"
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ –∏ –≤–≤–µ–¥–∏—Ç–µ <code>/admin</code> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
